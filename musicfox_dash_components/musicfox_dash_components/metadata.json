{
  "src/lib/components/Hello.react.js": {
    "description": "A component that leverages intro.js under the hood to provide the Hello component\nfrom musicfox.io. Include the steps you'd like to highlight and more.\n\nThis component uses [intro.js](https://intro.js.com/) and thus far most endpoints for Steps\nare implemented.",
    "displayName": "Hello",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
      },
      "steps": {
        "type": {
          "name": "array"
        },
        "required": true,
        "description": "List of dictionaries containing each step, with \"intro\" and \"element\"\nkeys, at a minimum."
      },
      "nextLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "nextLabel\n\nString label for the \"next\" button",
        "defaultValue": {
          "value": "\"Next\"",
          "computed": false
        }
      },
      "prevLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "prevLabel\n\nString label for the \"prev\" button",
        "defaultValue": {
          "value": "\"Previous\"",
          "computed": false
        }
      },
      "skipLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "skipLabel \n\nString label for the \"skip\" button",
        "defaultValue": {
          "value": "\"Skip tutorial\"",
          "computed": false
        }
      },
      "doneLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "doneLabel\n\nString label for the \"done\" button",
        "defaultValue": {
          "value": "\"Done\"",
          "computed": false
        }
      },
      "hidePrev": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "hidePrev\n\nBoolean true to hide \"prev\" button in the first step, default is false, \ndisabled (grayed-out).",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "hideNext": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "hideNext\n\nBoolean true to hide \"next\" button in the last step, default is false,\ndisabled (grayed-out).",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "defaultTooltipPos": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "defaultTooltipPos\n\nString default tooltip position (these can be changed per-step)",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "tooltipClass": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "tooltipClass\n\nString class of all tooltip CSS"
      },
      "highlightClass": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "highlightClass\n\nString class of all highlight over tooltip CSS (for the helperLayer) in\nintro.js"
      },
      "exitOnEsc": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "exitOnEsc\n\nBoolean true exits with an esc keypress, defaults to true",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "exitOnOverlayClick": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "exitOnOverlayClick\n\nBoolean true exits if clicking on the overlay, defaults to false",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showStepNumbers": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "showStepNumbers\n\nBoolean true shows the steps in the red circle, default true",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "keyboardNavigation": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "keyboardNavigation\n\nBoolean true allows navigating with the keyboard",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "showProgress": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "showProgress\n\n\nBoolean true shows the progress bar",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "overlayOpacity": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "overlayOpacity\n\nNumber between 0 and 1 adjusts the opacity of the overlay layer",
        "defaultValue": {
          "value": ".5",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/ToDo.react.js": {
    "description": "A component that renders a bootstrap card with Github Markdown bullet points, the\nToDo component from musicfox.io. Optionally include a title, subtitle, and/or footer.\n\nThis component uses [react-markdown](https://rexxars.github.io/react-markdown/)\nunder the hood, in the same fashion as the Dash Core Components Markdown component.",
    "displayName": "ToDo",
    "methods": [
      {
        "name": "checkString",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "mystring",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "checkArray",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "array",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "appendString",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "string",
            "type": null
          },
          {
            "name": "levels",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "toMD",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "text",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "listItems",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "makeBullets",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "array",
            "type": null
          },
          {
            "name": "levels",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "checkStringProp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "prop",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "isString",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "string",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "makeClass",
        "docblock": "Bootstrap-specific card class manipulations",
        "modifiers": [],
        "params": [
          {
            "name": "string"
          },
          {
            "name": "children"
          }
        ],
        "returns": null,
        "description": "Bootstrap-specific card class manipulations"
      },
      {
        "name": "makeNothing",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cardHeader",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cardFooter",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cardTitle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cardSubtitle",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cardText",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
      },
      "todos": {
        "type": {
          "name": "arrayOf",
          "value": {
            "name": "string"
          }
        },
        "required": false,
        "description": "A todo list.\n\nEnter the actual \"todos\" you have here as a list of strings or key-value pairs \nconsisting of strings=['another list', {'orAnother':['string-key:list-value', 'pairs']}].\n\nThese will be your \"bullet points\" in the typical \"list\".\n\nMarkdown all the way."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string title you'd like to include. Markdown all the way."
      },
      "subtitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string subtitle you'd like to include. Markdown all the way."
      },
      "footer": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string footer you'd like to include. Markdown all the way."
      },
      "header": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string header you'd like to include. Markdown all the way."
      },
      "dangerously_allow_html": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean True or False (default)\n\nTrue will allow Markdown HTML rendering but leave your clients exposed to XSS attacks.\n\nDon't do this. But I'm into freedom; just don't blame ToDo when things go awry.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "loading_state": {
        "type": {
          "name": "shape",
          "value": {
            "is_loading": {
              "name": "bool",
              "description": "Determines if the component is loading or not",
              "required": false
            },
            "prop_name": {
              "name": "string",
              "description": "Holds which property is loading",
              "required": false
            },
            "component_name": {
              "name": "string",
              "description": "Holds the name of the component that is loading",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Object that holds the loading state object coming from dash-renderer"
      },
      "containerProps": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "An object containing custom element props to put on the container\nelement such as id or style"
      }
    }
  },
  "src/lib/components/Twash.react.js": {
    "description": "Twash, A Twitter Profile Timeline component for Dash from\nmusicfox.io.\n\nThis component uses react-twitter-widgets under the hood.",
    "displayName": "Twash",
    "methods": [
      {
        "name": "buildOptions",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "buildChromeOptions",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "options",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
      },
      "sourceType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "String 'profile' is all for now"
      },
      "handle": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "String user name or public handle, e.g. ArianaGrande"
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Integer height (in pixels)"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Integer width (in pixels)"
      },
      "theme": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'dark'",
              "computed": false
            },
            {
              "value": "'light'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "* With dark or light theme"
      },
      "linkColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "* With custom link colors. Note: Only Hex colors are supported."
      },
      "borderColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "* With custom border colors. Note: Only Hex colors are supported."
      },
      "noHeader": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "* Hide the header from timeline"
      },
      "noFooter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "* Hide the footer from timeline"
      },
      "noBorders": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "* Hide the border from timeline"
      },
      "noScrollbar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "* Hide the scrollbars"
      },
      "transparent": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "* Enable Transparancy"
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "* Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html"
      }
    }
  }
}