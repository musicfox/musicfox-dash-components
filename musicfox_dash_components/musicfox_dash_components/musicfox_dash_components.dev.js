window["musicfox_dash_components"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/lib/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/intro.js":
/*!*************************!*\
  !*** ./assets/intro.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * Intro.js v2.9.3\n * https://github.com/usablica/intro.js\n *\n * Copyright (C) 2017 Afshin Mehrabani (@afshinmeh)\n */\n\n(function (f) {\n  if (( false ? undefined : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n    // deprecated function\n    // @since 2.8.0\n    module.exports.introJs = function () {\n      console.warn('Deprecated: please use require(\"intro.js\") directly, instead of the introJs method of the function');\n      // introJs()\n      return f().apply(this, arguments);\n    };\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var g; }\n})(function () {\n  //Default config/variables\n  var VERSION = '2.9.3';\n\n  /**\n   * IntroJs main class\n   *\n   * @class IntroJs\n   */\n  function IntroJs(obj) {\n    this._targetElement = obj;\n    this._introItems = [];\n\n    this._options = {\n      /* Next button label in tooltip box */\n      nextLabel: 'Next &rarr;',\n      /* Previous button label in tooltip box */\n      prevLabel: '&larr; Back',\n      /* Skip button label in tooltip box */\n      skipLabel: 'Skip',\n      /* Done button label in tooltip box */\n      doneLabel: 'Done',\n      /* Hide previous button in the first step? Otherwise, it will be disabled button. */\n      hidePrev: false,\n      /* Hide next button in the last step? Otherwise, it will be disabled button. */\n      hideNext: false,\n      /* Default tooltip box position */\n      tooltipPosition: 'bottom',\n      /* Next CSS class for tooltip boxes */\n      tooltipClass: '',\n      /* CSS class that is added to the helperLayer */\n      highlightClass: '',\n      /* Close introduction when pressing Escape button? */\n      exitOnEsc: true,\n      /* Close introduction when clicking on overlay layer? */\n      exitOnOverlayClick: true,\n      /* Show step numbers in introduction? */\n      showStepNumbers: true,\n      /* Let user use keyboard to navigate the tour? */\n      keyboardNavigation: true,\n      /* Show tour control buttons? */\n      showButtons: true,\n      /* Show tour bullets? */\n      showBullets: true,\n      /* Show tour progress? */\n      showProgress: false,\n      /* Scroll to highlighted element? */\n      scrollToElement: true,\n      /*\n       * Should we scroll the tooltip or target element?\n       *\n       * Options are: 'element' or 'tooltip'\n       */\n      scrollTo: 'element',\n      /* Padding to add after scrolling when element is not in the viewport (in pixels) */\n      scrollPadding: 30,\n      /* Set the overlay opacity */\n      overlayOpacity: 0.8,\n      /* Precedence of positions, when auto is enabled */\n      positionPrecedence: [\"bottom\", \"top\", \"right\", \"left\"],\n      /* Disable an interaction with element? */\n      disableInteraction: false,\n      /* Set how much padding to be used around helper element */\n      helperElementPadding: 10,\n      /* Default hint position */\n      hintPosition: 'top-middle',\n      /* Hint button label */\n      hintButtonLabel: 'Got it',\n      /* Adding animation to hints? */\n      hintAnimation: true,\n      /* additional classes to put on the buttons */\n      buttonClass: \"introjs-button\"\n    };\n  }\n\n  /**\n   * Initiate a new introduction/guide from an element in the page\n   *\n   * @api private\n   * @method _introForElement\n   * @param {Object} targetElm\n   * @param {String} group\n   * @returns {Boolean} Success or not?\n   */\n  function _introForElement(targetElm, group) {\n    var allIntroSteps = targetElm.querySelectorAll(\"*[data-intro]\"),\n        introItems = [];\n\n    if (this._options.steps) {\n      //use steps passed programmatically\n      _forEach(this._options.steps, function (step) {\n        var currentItem = _cloneObject(step);\n\n        //set the step\n        currentItem.step = introItems.length + 1;\n\n        //use querySelector function only when developer used CSS selector\n        if (typeof currentItem.element === 'string') {\n          //grab the element with given selector from the page\n          currentItem.element = document.querySelector(currentItem.element);\n        }\n\n        //intro without element\n        if (typeof currentItem.element === 'undefined' || currentItem.element === null) {\n          var floatingElementQuery = document.querySelector(\".introjsFloatingElement\");\n\n          if (floatingElementQuery === null) {\n            floatingElementQuery = document.createElement('div');\n            floatingElementQuery.className = 'introjsFloatingElement';\n\n            document.body.appendChild(floatingElementQuery);\n          }\n\n          currentItem.element = floatingElementQuery;\n          currentItem.position = 'floating';\n        }\n\n        currentItem.scrollTo = currentItem.scrollTo || this._options.scrollTo;\n\n        if (typeof currentItem.disableInteraction === 'undefined') {\n          currentItem.disableInteraction = this._options.disableInteraction;\n        }\n\n        if (currentItem.element !== null) {\n          introItems.push(currentItem);\n        }\n      }.bind(this));\n    } else {\n      //use steps from data-* annotations\n      var elmsLength = allIntroSteps.length;\n      var disableInteraction;\n\n      //if there's no element to intro\n      if (elmsLength < 1) {\n        return false;\n      }\n\n      _forEach(allIntroSteps, function (currentElement) {\n\n        // PR #80\n        // start intro for groups of elements\n        if (group && currentElement.getAttribute(\"data-intro-group\") !== group) {\n          return;\n        }\n\n        // skip hidden elements\n        if (currentElement.style.display === 'none') {\n          return;\n        }\n\n        var step = parseInt(currentElement.getAttribute('data-step'), 10);\n\n        if (typeof currentElement.getAttribute('data-disable-interaction') !== 'undefined') {\n          disableInteraction = !!currentElement.getAttribute('data-disable-interaction');\n        } else {\n          disableInteraction = this._options.disableInteraction;\n        }\n\n        if (step > 0) {\n          introItems[step - 1] = {\n            element: currentElement,\n            intro: currentElement.getAttribute('data-intro'),\n            step: parseInt(currentElement.getAttribute('data-step'), 10),\n            tooltipClass: currentElement.getAttribute('data-tooltipclass'),\n            highlightClass: currentElement.getAttribute('data-highlightclass'),\n            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition,\n            scrollTo: currentElement.getAttribute('data-scrollto') || this._options.scrollTo,\n            disableInteraction: disableInteraction\n          };\n        }\n      }.bind(this));\n\n      //next add intro items without data-step\n      //todo: we need a cleanup here, two loops are redundant\n      var nextStep = 0;\n\n      _forEach(allIntroSteps, function (currentElement) {\n\n        // PR #80\n        // start intro for groups of elements\n        if (group && currentElement.getAttribute(\"data-intro-group\") !== group) {\n          return;\n        }\n\n        if (currentElement.getAttribute('data-step') === null) {\n\n          while (true) {\n            if (typeof introItems[nextStep] === 'undefined') {\n              break;\n            } else {\n              nextStep++;\n            }\n          }\n\n          if (typeof currentElement.getAttribute('data-disable-interaction') !== 'undefined') {\n            disableInteraction = !!currentElement.getAttribute('data-disable-interaction');\n          } else {\n            disableInteraction = this._options.disableInteraction;\n          }\n\n          introItems[nextStep] = {\n            element: currentElement,\n            intro: currentElement.getAttribute('data-intro'),\n            step: nextStep + 1,\n            tooltipClass: currentElement.getAttribute('data-tooltipclass'),\n            highlightClass: currentElement.getAttribute('data-highlightclass'),\n            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition,\n            scrollTo: currentElement.getAttribute('data-scrollto') || this._options.scrollTo,\n            disableInteraction: disableInteraction\n          };\n        }\n      }.bind(this));\n    }\n\n    //removing undefined/null elements\n    var tempIntroItems = [];\n    for (var z = 0; z < introItems.length; z++) {\n      if (introItems[z]) {\n        // copy non-falsy values to the end of the array\n        tempIntroItems.push(introItems[z]);\n      }\n    }\n\n    introItems = tempIntroItems;\n\n    //Ok, sort all items with given steps\n    introItems.sort(function (a, b) {\n      return a.step - b.step;\n    });\n\n    //set it to the introJs object\n    this._introItems = introItems;\n\n    //add overlay layer to the page\n    if (_addOverlayLayer.call(this, targetElm)) {\n      //then, start the show\n      _nextStep.call(this);\n\n      if (this._options.keyboardNavigation) {\n        DOMEvent.on(window, 'keydown', _onKeyDown, this, true);\n      }\n      //for window resize\n      DOMEvent.on(window, 'resize', _onResize, this, true);\n    }\n    return false;\n  }\n\n  function _onResize() {\n    this.refresh.call(this);\n  }\n\n  /**\n  * on keyCode:\n  * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n  * This feature has been removed from the Web standards.\n  * Though some browsers may still support it, it is in\n  * the process of being dropped.\n  * Instead, you should use KeyboardEvent.code,\n  * if it's implemented.\n  *\n  * jQuery's approach is to test for\n  *   (1) e.which, then\n  *   (2) e.charCode, then\n  *   (3) e.keyCode\n  * https://github.com/jquery/jquery/blob/a6b0705294d336ae2f63f7276de0da1195495363/src/event.js#L638\n  *\n  * @param type var\n  * @return type\n  */\n  function _onKeyDown(e) {\n    var code = e.code === null ? e.which : e.code;\n\n    // if code/e.which is null\n    if (code === null) {\n      code = e.charCode === null ? e.keyCode : e.charCode;\n    }\n\n    if ((code === 'Escape' || code === 27) && this._options.exitOnEsc === true) {\n      //escape key pressed, exit the intro\n      //check if exit callback is defined\n      _exitIntro.call(this, this._targetElement);\n    } else if (code === 'ArrowLeft' || code === 37) {\n      //left arrow\n      _previousStep.call(this);\n    } else if (code === 'ArrowRight' || code === 39) {\n      //right arrow\n      _nextStep.call(this);\n    } else if (code === 'Enter' || code === 13) {\n      //srcElement === ie\n      var target = e.target || e.srcElement;\n      if (target && target.className.match('introjs-prevbutton')) {\n        //user hit enter while focusing on previous button\n        _previousStep.call(this);\n      } else if (target && target.className.match('introjs-skipbutton')) {\n        //user hit enter while focusing on skip button\n        if (this._introItems.length - 1 === this._currentStep && typeof this._introCompleteCallback === 'function') {\n          this._introCompleteCallback.call(this);\n        }\n\n        _exitIntro.call(this, this._targetElement);\n      } else if (target && target.getAttribute('data-stepnumber')) {\n        // user hit enter while focusing on step bullet\n        target.click();\n      } else {\n        //default behavior for responding to enter\n        _nextStep.call(this);\n      }\n\n      //prevent default behaviour on hitting Enter, to prevent steps being skipped in some browsers\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    }\n  }\n\n  /*\n    * makes a copy of the object\n    * @api private\n    * @method _cloneObject\n   */\n  function _cloneObject(object) {\n    if (object === null || (typeof object === \"undefined\" ? \"undefined\" : _typeof(object)) !== 'object' || typeof object.nodeType !== 'undefined') {\n      return object;\n    }\n    var temp = {};\n    for (var key in object) {\n      if (typeof window.jQuery !== 'undefined' && object[key] instanceof window.jQuery) {\n        temp[key] = object[key];\n      } else {\n        temp[key] = _cloneObject(object[key]);\n      }\n    }\n    return temp;\n  }\n  /**\n   * Go to specific step of introduction\n   *\n   * @api private\n   * @method _goToStep\n   */\n  function _goToStep(step) {\n    //because steps starts with zero\n    this._currentStep = step - 2;\n    if (typeof this._introItems !== 'undefined') {\n      _nextStep.call(this);\n    }\n  }\n\n  /**\n   * Go to the specific step of introduction with the explicit [data-step] number\n   *\n   * @api private\n   * @method _goToStepNumber\n   */\n  function _goToStepNumber(step) {\n    this._currentStepNumber = step;\n    if (typeof this._introItems !== 'undefined') {\n      _nextStep.call(this);\n    }\n  }\n\n  /**\n   * Go to next step on intro\n   *\n   * @api private\n   * @method _nextStep\n   */\n  function _nextStep() {\n    this._direction = 'forward';\n\n    if (typeof this._currentStepNumber !== 'undefined') {\n      _forEach(this._introItems, function (item, i) {\n        if (item.step === this._currentStepNumber) {\n          this._currentStep = i - 1;\n          this._currentStepNumber = undefined;\n        }\n      }.bind(this));\n    }\n\n    if (typeof this._currentStep === 'undefined') {\n      this._currentStep = 0;\n    } else {\n      ++this._currentStep;\n    }\n\n    var nextStep = this._introItems[this._currentStep];\n    var continueStep = true;\n\n    if (typeof this._introBeforeChangeCallback !== 'undefined') {\n      continueStep = this._introBeforeChangeCallback.call(this, nextStep.element);\n    }\n\n    // if `onbeforechange` returned `false`, stop displaying the element\n    if (continueStep === false) {\n      --this._currentStep;\n      return false;\n    }\n\n    if (this._introItems.length <= this._currentStep) {\n      //end of the intro\n      //check if any callback is defined\n      if (typeof this._introCompleteCallback === 'function') {\n        this._introCompleteCallback.call(this);\n      }\n      _exitIntro.call(this, this._targetElement);\n      return;\n    }\n\n    _showElement.call(this, nextStep);\n  }\n\n  /**\n   * Go to previous step on intro\n   *\n   * @api private\n   * @method _previousStep\n   */\n  function _previousStep() {\n    this._direction = 'backward';\n\n    if (this._currentStep === 0) {\n      return false;\n    }\n\n    --this._currentStep;\n\n    var nextStep = this._introItems[this._currentStep];\n    var continueStep = true;\n\n    if (typeof this._introBeforeChangeCallback !== 'undefined') {\n      continueStep = this._introBeforeChangeCallback.call(this, nextStep.element);\n    }\n\n    // if `onbeforechange` returned `false`, stop displaying the element\n    if (continueStep === false) {\n      ++this._currentStep;\n      return false;\n    }\n\n    _showElement.call(this, nextStep);\n  }\n\n  /**\n   * Update placement of the intro objects on the screen\n   * @api private\n   */\n  function _refresh() {\n    // re-align intros\n    _setHelperLayerPosition.call(this, document.querySelector('.introjs-helperLayer'));\n    _setHelperLayerPosition.call(this, document.querySelector('.introjs-tooltipReferenceLayer'));\n    _setHelperLayerPosition.call(this, document.querySelector('.introjs-disableInteraction'));\n\n    // re-align tooltip\n    if (this._currentStep !== undefined && this._currentStep !== null) {\n      var oldHelperNumberLayer = document.querySelector('.introjs-helperNumberLayer'),\n          oldArrowLayer = document.querySelector('.introjs-arrow'),\n          oldtooltipContainer = document.querySelector('.introjs-tooltip');\n      _placeTooltip.call(this, this._introItems[this._currentStep].element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);\n    }\n\n    //re-align hints\n    _reAlignHints.call(this);\n    return this;\n  }\n\n  /**\n   * Exit from intro\n   *\n   * @api private\n   * @method _exitIntro\n   * @param {Object} targetElement\n   * @param {Boolean} force - Setting to `true` will skip the result of beforeExit callback\n   */\n  function _exitIntro(targetElement, force) {\n    var continueExit = true;\n\n    // calling onbeforeexit callback\n    //\n    // If this callback return `false`, it would halt the process\n    if (this._introBeforeExitCallback !== undefined) {\n      continueExit = this._introBeforeExitCallback.call(this);\n    }\n\n    // skip this check if `force` parameter is `true`\n    // otherwise, if `onbeforeexit` returned `false`, don't exit the intro\n    if (!force && continueExit === false) return;\n\n    //remove overlay layers from the page\n    var overlayLayers = targetElement.querySelectorAll('.introjs-overlay');\n\n    if (overlayLayers && overlayLayers.length) {\n      _forEach(overlayLayers, function (overlayLayer) {\n        overlayLayer.style.opacity = 0;\n        window.setTimeout(function () {\n          if (this.parentNode) {\n            this.parentNode.removeChild(this);\n          }\n        }.bind(overlayLayer), 500);\n      }.bind(this));\n    }\n\n    //remove all helper layers\n    var helperLayer = targetElement.querySelector('.introjs-helperLayer');\n    if (helperLayer) {\n      helperLayer.parentNode.removeChild(helperLayer);\n    }\n\n    var referenceLayer = targetElement.querySelector('.introjs-tooltipReferenceLayer');\n    if (referenceLayer) {\n      referenceLayer.parentNode.removeChild(referenceLayer);\n    }\n\n    //remove disableInteractionLayer\n    var disableInteractionLayer = targetElement.querySelector('.introjs-disableInteraction');\n    if (disableInteractionLayer) {\n      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);\n    }\n\n    //remove intro floating element\n    var floatingElement = document.querySelector('.introjsFloatingElement');\n    if (floatingElement) {\n      floatingElement.parentNode.removeChild(floatingElement);\n    }\n\n    _removeShowElement();\n\n    //remove `introjs-fixParent` class from the elements\n    var fixParents = document.querySelectorAll('.introjs-fixParent');\n    _forEach(fixParents, function (parent) {\n      _removeClass(parent, /introjs-fixParent/g);\n    });\n\n    //clean listeners\n    DOMEvent.off(window, 'keydown', _onKeyDown, this, true);\n    DOMEvent.off(window, 'resize', _onResize, this, true);\n\n    //check if any callback is defined\n    if (this._introExitCallback !== undefined) {\n      this._introExitCallback.call(this);\n    }\n\n    //set the step to zero\n    this._currentStep = undefined;\n  }\n\n  /**\n   * Render tooltip box in the page\n   *\n   * @api private\n   * @method _placeTooltip\n   * @param {HTMLElement} targetElement\n   * @param {HTMLElement} tooltipLayer\n   * @param {HTMLElement} arrowLayer\n   * @param {HTMLElement} helperNumberLayer\n   * @param {Boolean} hintMode\n   */\n  function _placeTooltip(targetElement, tooltipLayer, arrowLayer, helperNumberLayer, hintMode) {\n    var tooltipCssClass = '',\n        currentStepObj,\n        tooltipOffset,\n        targetOffset,\n        windowSize,\n        currentTooltipPosition;\n\n    hintMode = hintMode || false;\n\n    //reset the old style\n    tooltipLayer.style.top = null;\n    tooltipLayer.style.right = null;\n    tooltipLayer.style.bottom = null;\n    tooltipLayer.style.left = null;\n    tooltipLayer.style.marginLeft = null;\n    tooltipLayer.style.marginTop = null;\n\n    arrowLayer.style.display = 'inherit';\n\n    if (typeof helperNumberLayer !== 'undefined' && helperNumberLayer !== null) {\n      helperNumberLayer.style.top = null;\n      helperNumberLayer.style.left = null;\n    }\n\n    //prevent error when `this._currentStep` is undefined\n    if (!this._introItems[this._currentStep]) return;\n\n    //if we have a custom css class for each step\n    currentStepObj = this._introItems[this._currentStep];\n    if (typeof currentStepObj.tooltipClass === 'string') {\n      tooltipCssClass = currentStepObj.tooltipClass;\n    } else {\n      tooltipCssClass = this._options.tooltipClass;\n    }\n\n    tooltipLayer.className = ('introjs-tooltip ' + tooltipCssClass).replace(/^\\s+|\\s+$/g, '');\n    tooltipLayer.setAttribute('role', 'dialog');\n\n    currentTooltipPosition = this._introItems[this._currentStep].position;\n\n    // Floating is always valid, no point in calculating\n    if (currentTooltipPosition !== \"floating\") {\n      currentTooltipPosition = _determineAutoPosition.call(this, targetElement, tooltipLayer, currentTooltipPosition);\n    }\n\n    var tooltipLayerStyleLeft;\n    targetOffset = _getOffset(targetElement);\n    tooltipOffset = _getOffset(tooltipLayer);\n    windowSize = _getWinSize();\n\n    _addClass(tooltipLayer, 'introjs-' + currentTooltipPosition);\n\n    switch (currentTooltipPosition) {\n      case 'top-right-aligned':\n        arrowLayer.className = 'introjs-arrow bottom-right';\n\n        var tooltipLayerStyleRight = 0;\n        _checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer);\n        tooltipLayer.style.bottom = targetOffset.height + 20 + 'px';\n        break;\n\n      case 'top-middle-aligned':\n        arrowLayer.className = 'introjs-arrow bottom-middle';\n\n        var tooltipLayerStyleLeftRight = targetOffset.width / 2 - tooltipOffset.width / 2;\n\n        // a fix for middle aligned hints\n        if (hintMode) {\n          tooltipLayerStyleLeftRight += 5;\n        }\n\n        if (_checkLeft(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, tooltipLayer)) {\n          tooltipLayer.style.right = null;\n          _checkRight(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, windowSize, tooltipLayer);\n        }\n        tooltipLayer.style.bottom = targetOffset.height + 20 + 'px';\n        break;\n\n      case 'top-left-aligned':\n      // top-left-aligned is the same as the default top\n      case 'top':\n        arrowLayer.className = 'introjs-arrow bottom';\n\n        tooltipLayerStyleLeft = hintMode ? 0 : 15;\n\n        _checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer);\n        tooltipLayer.style.bottom = targetOffset.height + 20 + 'px';\n        break;\n      case 'right':\n        tooltipLayer.style.left = targetOffset.width + 20 + 'px';\n        if (targetOffset.top + tooltipOffset.height > windowSize.height) {\n          // In this case, right would have fallen below the bottom of the screen.\n          // Modify so that the bottom of the tooltip connects with the target\n          arrowLayer.className = \"introjs-arrow left-bottom\";\n          tooltipLayer.style.top = \"-\" + (tooltipOffset.height - targetOffset.height - 20) + \"px\";\n        } else {\n          arrowLayer.className = 'introjs-arrow left';\n        }\n        break;\n      case 'left':\n        if (!hintMode && this._options.showStepNumbers === true) {\n          tooltipLayer.style.top = '15px';\n        }\n\n        if (targetOffset.top + tooltipOffset.height > windowSize.height) {\n          // In this case, left would have fallen below the bottom of the screen.\n          // Modify so that the bottom of the tooltip connects with the target\n          tooltipLayer.style.top = \"-\" + (tooltipOffset.height - targetOffset.height - 20) + \"px\";\n          arrowLayer.className = 'introjs-arrow right-bottom';\n        } else {\n          arrowLayer.className = 'introjs-arrow right';\n        }\n        tooltipLayer.style.right = targetOffset.width + 20 + 'px';\n\n        break;\n      case 'floating':\n        arrowLayer.style.display = 'none';\n\n        //we have to adjust the top and left of layer manually for intro items without element\n        tooltipLayer.style.left = '50%';\n        tooltipLayer.style.top = '50%';\n        tooltipLayer.style.marginLeft = '-' + tooltipOffset.width / 2 + 'px';\n        tooltipLayer.style.marginTop = '-' + tooltipOffset.height / 2 + 'px';\n\n        if (typeof helperNumberLayer !== 'undefined' && helperNumberLayer !== null) {\n          helperNumberLayer.style.left = '-' + (tooltipOffset.width / 2 + 18) + 'px';\n          helperNumberLayer.style.top = '-' + (tooltipOffset.height / 2 + 18) + 'px';\n        }\n\n        break;\n      case 'bottom-right-aligned':\n        arrowLayer.className = 'introjs-arrow top-right';\n\n        tooltipLayerStyleRight = 0;\n        _checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer);\n        tooltipLayer.style.top = targetOffset.height + 20 + 'px';\n        break;\n\n      case 'bottom-middle-aligned':\n        arrowLayer.className = 'introjs-arrow top-middle';\n\n        tooltipLayerStyleLeftRight = targetOffset.width / 2 - tooltipOffset.width / 2;\n\n        // a fix for middle aligned hints\n        if (hintMode) {\n          tooltipLayerStyleLeftRight += 5;\n        }\n\n        if (_checkLeft(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, tooltipLayer)) {\n          tooltipLayer.style.right = null;\n          _checkRight(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, windowSize, tooltipLayer);\n        }\n        tooltipLayer.style.top = targetOffset.height + 20 + 'px';\n        break;\n\n      // case 'bottom-left-aligned':\n      // Bottom-left-aligned is the same as the default bottom\n      // case 'bottom':\n      // Bottom going to follow the default behavior\n      default:\n        arrowLayer.className = 'introjs-arrow top';\n\n        tooltipLayerStyleLeft = 0;\n        _checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer);\n        tooltipLayer.style.top = targetOffset.height + 20 + 'px';\n    }\n  }\n\n  /**\n   * Set tooltip left so it doesn't go off the right side of the window\n   *\n   * @return boolean true, if tooltipLayerStyleLeft is ok.  false, otherwise.\n   */\n  function _checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer) {\n    if (targetOffset.left + tooltipLayerStyleLeft + tooltipOffset.width > windowSize.width) {\n      // off the right side of the window\n      tooltipLayer.style.left = windowSize.width - tooltipOffset.width - targetOffset.left + 'px';\n      return false;\n    }\n    tooltipLayer.style.left = tooltipLayerStyleLeft + 'px';\n    return true;\n  }\n\n  /**\n   * Set tooltip right so it doesn't go off the left side of the window\n   *\n   * @return boolean true, if tooltipLayerStyleRight is ok.  false, otherwise.\n   */\n  function _checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer) {\n    if (targetOffset.left + targetOffset.width - tooltipLayerStyleRight - tooltipOffset.width < 0) {\n      // off the left side of the window\n      tooltipLayer.style.left = -targetOffset.left + 'px';\n      return false;\n    }\n    tooltipLayer.style.right = tooltipLayerStyleRight + 'px';\n    return true;\n  }\n\n  /**\n   * Determines the position of the tooltip based on the position precedence and availability\n   * of screen space.\n   *\n   * @param {Object}    targetElement\n   * @param {Object}    tooltipLayer\n   * @param {String}    desiredTooltipPosition\n   * @return {String}   calculatedPosition\n   */\n  function _determineAutoPosition(targetElement, tooltipLayer, desiredTooltipPosition) {\n\n    // Take a clone of position precedence. These will be the available\n    var possiblePositions = this._options.positionPrecedence.slice();\n\n    var windowSize = _getWinSize();\n    var tooltipHeight = _getOffset(tooltipLayer).height + 10;\n    var tooltipWidth = _getOffset(tooltipLayer).width + 20;\n    var targetElementRect = targetElement.getBoundingClientRect();\n\n    // If we check all the possible areas, and there are no valid places for the tooltip, the element\n    // must take up most of the screen real estate. Show the tooltip floating in the middle of the screen.\n    var calculatedPosition = \"floating\";\n\n    /*\n    * auto determine position \n    */\n\n    // Check for space below\n    if (targetElementRect.bottom + tooltipHeight + tooltipHeight > windowSize.height) {\n      _removeEntry(possiblePositions, \"bottom\");\n    }\n\n    // Check for space above\n    if (targetElementRect.top - tooltipHeight < 0) {\n      _removeEntry(possiblePositions, \"top\");\n    }\n\n    // Check for space to the right\n    if (targetElementRect.right + tooltipWidth > windowSize.width) {\n      _removeEntry(possiblePositions, \"right\");\n    }\n\n    // Check for space to the left\n    if (targetElementRect.left - tooltipWidth < 0) {\n      _removeEntry(possiblePositions, \"left\");\n    }\n\n    // @var {String}  ex: 'right-aligned'\n    var desiredAlignment = function (pos) {\n      var hyphenIndex = pos.indexOf('-');\n      if (hyphenIndex !== -1) {\n        // has alignment\n        return pos.substr(hyphenIndex);\n      }\n      return '';\n    }(desiredTooltipPosition || '');\n\n    // strip alignment from position\n    if (desiredTooltipPosition) {\n      // ex: \"bottom-right-aligned\"\n      // should return 'bottom'\n      desiredTooltipPosition = desiredTooltipPosition.split('-')[0];\n    }\n\n    if (possiblePositions.length) {\n      if (desiredTooltipPosition !== \"auto\" && possiblePositions.indexOf(desiredTooltipPosition) > -1) {\n        // If the requested position is in the list, choose that\n        calculatedPosition = desiredTooltipPosition;\n      } else {\n        // Pick the first valid position, in order\n        calculatedPosition = possiblePositions[0];\n      }\n    }\n\n    // only top and bottom positions have optional alignments\n    if (['top', 'bottom'].indexOf(calculatedPosition) !== -1) {\n      calculatedPosition += _determineAutoAlignment(targetElementRect.left, tooltipWidth, windowSize, desiredAlignment);\n    }\n\n    return calculatedPosition;\n  }\n\n  /**\n  * auto-determine alignment\n  * @param {Integer}  offsetLeft\n  * @param {Integer}  tooltipWidth\n  * @param {Object}   windowSize\n  * @param {String}   desiredAlignment\n  * @return {String}  calculatedAlignment\n  */\n  function _determineAutoAlignment(offsetLeft, tooltipWidth, windowSize, desiredAlignment) {\n    var halfTooltipWidth = tooltipWidth / 2,\n        winWidth = Math.min(windowSize.width, window.screen.width),\n        possibleAlignments = ['-left-aligned', '-middle-aligned', '-right-aligned'],\n        calculatedAlignment = '';\n\n    // valid left must be at least a tooltipWidth\n    // away from right side\n    if (winWidth - offsetLeft < tooltipWidth) {\n      _removeEntry(possibleAlignments, '-left-aligned');\n    }\n\n    // valid middle must be at least half \n    // width away from both sides\n    if (offsetLeft < halfTooltipWidth || winWidth - offsetLeft < halfTooltipWidth) {\n      _removeEntry(possibleAlignments, '-middle-aligned');\n    }\n\n    // valid right must be at least a tooltipWidth\n    // width away from left side\n    if (offsetLeft < tooltipWidth) {\n      _removeEntry(possibleAlignments, '-right-aligned');\n    }\n\n    if (possibleAlignments.length) {\n      if (possibleAlignments.indexOf(desiredAlignment) !== -1) {\n        // the desired alignment is valid\n        calculatedAlignment = desiredAlignment;\n      } else {\n        // pick the first valid position, in order\n        calculatedAlignment = possibleAlignments[0];\n      }\n    } else {\n      // if screen width is too small \n      // for ANY alignment, middle is \n      // probably the best for visibility\n      calculatedAlignment = '-middle-aligned';\n    }\n\n    return calculatedAlignment;\n  }\n\n  /**\n   * Remove an entry from a string array if it's there, does nothing if it isn't there.\n   *\n   * @param {Array} stringArray\n   * @param {String} stringToRemove\n   */\n  function _removeEntry(stringArray, stringToRemove) {\n    if (stringArray.indexOf(stringToRemove) > -1) {\n      stringArray.splice(stringArray.indexOf(stringToRemove), 1);\n    }\n  }\n\n  /**\n   * Update the position of the helper layer on the screen\n   *\n   * @api private\n   * @method _setHelperLayerPosition\n   * @param {Object} helperLayer\n   */\n  function _setHelperLayerPosition(helperLayer) {\n    if (helperLayer) {\n      //prevent error when `this._currentStep` in undefined\n      if (!this._introItems[this._currentStep]) return;\n\n      var currentElement = this._introItems[this._currentStep],\n          elementPosition = _getOffset(currentElement.element),\n          widthHeightPadding = this._options.helperElementPadding;\n\n      // If the target element is fixed, the tooltip should be fixed as well.\n      // Otherwise, remove a fixed class that may be left over from the previous\n      // step.\n      if (_isFixed(currentElement.element)) {\n        _addClass(helperLayer, 'introjs-fixedTooltip');\n      } else {\n        _removeClass(helperLayer, 'introjs-fixedTooltip');\n      }\n\n      if (currentElement.position === 'floating') {\n        widthHeightPadding = 0;\n      }\n\n      //set new position to helper layer\n      helperLayer.style.cssText = 'width: ' + (elementPosition.width + widthHeightPadding) + 'px; ' + 'height:' + (elementPosition.height + widthHeightPadding) + 'px; ' + 'top:' + (elementPosition.top - widthHeightPadding / 2) + 'px;' + 'left: ' + (elementPosition.left - widthHeightPadding / 2) + 'px;';\n    }\n  }\n\n  /**\n   * Add disableinteraction layer and adjust the size and position of the layer\n   *\n   * @api private\n   * @method _disableInteraction\n   */\n  function _disableInteraction() {\n    var disableInteractionLayer = document.querySelector('.introjs-disableInteraction');\n\n    if (disableInteractionLayer === null) {\n      disableInteractionLayer = document.createElement('div');\n      disableInteractionLayer.className = 'introjs-disableInteraction';\n      this._targetElement.appendChild(disableInteractionLayer);\n    }\n\n    _setHelperLayerPosition.call(this, disableInteractionLayer);\n  }\n\n  /**\n   * Setting anchors to behave like buttons\n   *\n   * @api private\n   * @method _setAnchorAsButton\n   */\n  function _setAnchorAsButton(anchor) {\n    anchor.setAttribute('role', 'button');\n    anchor.tabIndex = 0;\n  }\n\n  /**\n   * Show an element on the page\n   *\n   * @api private\n   * @method _showElement\n   * @param {Object} targetElement\n   */\n  function _showElement(targetElement) {\n    if (typeof this._introChangeCallback !== 'undefined') {\n      this._introChangeCallback.call(this, targetElement.element);\n    }\n\n    var self = this,\n        oldHelperLayer = document.querySelector('.introjs-helperLayer'),\n        oldReferenceLayer = document.querySelector('.introjs-tooltipReferenceLayer'),\n        highlightClass = 'introjs-helperLayer',\n        nextTooltipButton,\n        prevTooltipButton,\n        skipTooltipButton,\n        scrollParent;\n\n    //check for a current step highlight class\n    if (typeof targetElement.highlightClass === 'string') {\n      highlightClass += ' ' + targetElement.highlightClass;\n    }\n    //check for options highlight class\n    if (typeof this._options.highlightClass === 'string') {\n      highlightClass += ' ' + this._options.highlightClass;\n    }\n\n    if (oldHelperLayer !== null) {\n      var oldHelperNumberLayer = oldReferenceLayer.querySelector('.introjs-helperNumberLayer'),\n          oldtooltipLayer = oldReferenceLayer.querySelector('.introjs-tooltiptext'),\n          oldArrowLayer = oldReferenceLayer.querySelector('.introjs-arrow'),\n          oldtooltipContainer = oldReferenceLayer.querySelector('.introjs-tooltip');\n\n      skipTooltipButton = oldReferenceLayer.querySelector('.introjs-skipbutton');\n      prevTooltipButton = oldReferenceLayer.querySelector('.introjs-prevbutton');\n      nextTooltipButton = oldReferenceLayer.querySelector('.introjs-nextbutton');\n\n      //update or reset the helper highlight class\n      oldHelperLayer.className = highlightClass;\n      //hide the tooltip\n      oldtooltipContainer.style.opacity = 0;\n      oldtooltipContainer.style.display = \"none\";\n\n      if (oldHelperNumberLayer !== null) {\n        var lastIntroItem = this._introItems[targetElement.step - 2 >= 0 ? targetElement.step - 2 : 0];\n\n        if (lastIntroItem !== null && this._direction === 'forward' && lastIntroItem.position === 'floating' || this._direction === 'backward' && targetElement.position === 'floating') {\n          oldHelperNumberLayer.style.opacity = 0;\n        }\n      }\n\n      // scroll to element\n      scrollParent = _getScrollParent(targetElement.element);\n\n      if (scrollParent !== document.body) {\n        // target is within a scrollable element\n        _scrollParentToElement(scrollParent, targetElement.element);\n      }\n\n      // set new position to helper layer\n      _setHelperLayerPosition.call(self, oldHelperLayer);\n      _setHelperLayerPosition.call(self, oldReferenceLayer);\n\n      //remove `introjs-fixParent` class from the elements\n      var fixParents = document.querySelectorAll('.introjs-fixParent');\n      _forEach(fixParents, function (parent) {\n        _removeClass(parent, /introjs-fixParent/g);\n      });\n\n      //remove old classes if the element still exist\n      _removeShowElement();\n\n      //we should wait until the CSS3 transition is competed (it's 0.3 sec) to prevent incorrect `height` and `width` calculation\n      if (self._lastShowElementTimer) {\n        window.clearTimeout(self._lastShowElementTimer);\n      }\n\n      self._lastShowElementTimer = window.setTimeout(function () {\n        //set current step to the label\n        if (oldHelperNumberLayer !== null) {\n          oldHelperNumberLayer.innerHTML = targetElement.step;\n        }\n        //set current tooltip text\n        oldtooltipLayer.innerHTML = targetElement.intro;\n        //set the tooltip position\n        oldtooltipContainer.style.display = \"block\";\n        _placeTooltip.call(self, targetElement.element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);\n\n        //change active bullet\n        if (self._options.showBullets) {\n          oldReferenceLayer.querySelector('.introjs-bullets li > a.active').className = '';\n          oldReferenceLayer.querySelector('.introjs-bullets li > a[data-stepnumber=\"' + targetElement.step + '\"]').className = 'active';\n        }\n        oldReferenceLayer.querySelector('.introjs-progress .introjs-progressbar').style.cssText = 'width:' + _getProgress.call(self) + '%;';\n        oldReferenceLayer.querySelector('.introjs-progress .introjs-progressbar').setAttribute('aria-valuenow', _getProgress.call(self));\n\n        //show the tooltip\n        oldtooltipContainer.style.opacity = 1;\n        if (oldHelperNumberLayer) oldHelperNumberLayer.style.opacity = 1;\n\n        //reset button focus\n        if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null && /introjs-donebutton/gi.test(skipTooltipButton.className)) {\n          // skip button is now \"done\" button\n          skipTooltipButton.focus();\n        } else if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          //still in the tour, focus on next\n          nextTooltipButton.focus();\n        }\n\n        // change the scroll of the window, if needed\n        _scrollTo.call(self, targetElement.scrollTo, targetElement, oldtooltipLayer);\n      }, 350);\n\n      // end of old element if-else condition\n    } else {\n      var helperLayer = document.createElement('div'),\n          referenceLayer = document.createElement('div'),\n          arrowLayer = document.createElement('div'),\n          tooltipLayer = document.createElement('div'),\n          tooltipTextLayer = document.createElement('div'),\n          bulletsLayer = document.createElement('div'),\n          progressLayer = document.createElement('div'),\n          buttonsLayer = document.createElement('div');\n\n      helperLayer.className = highlightClass;\n      referenceLayer.className = 'introjs-tooltipReferenceLayer';\n\n      // scroll to element\n      scrollParent = _getScrollParent(targetElement.element);\n\n      if (scrollParent !== document.body) {\n        // target is within a scrollable element\n        _scrollParentToElement(scrollParent, targetElement.element);\n      }\n\n      //set new position to helper layer\n      _setHelperLayerPosition.call(self, helperLayer);\n      _setHelperLayerPosition.call(self, referenceLayer);\n\n      //add helper layer to target element\n      this._targetElement.appendChild(helperLayer);\n      this._targetElement.appendChild(referenceLayer);\n\n      arrowLayer.className = 'introjs-arrow';\n\n      tooltipTextLayer.className = 'introjs-tooltiptext';\n      tooltipTextLayer.innerHTML = targetElement.intro;\n\n      bulletsLayer.className = 'introjs-bullets';\n\n      if (this._options.showBullets === false) {\n        bulletsLayer.style.display = 'none';\n      }\n\n      var ulContainer = document.createElement('ul');\n      ulContainer.setAttribute('role', 'tablist');\n\n      var anchorClick = function anchorClick() {\n        self.goToStep(this.getAttribute('data-stepnumber'));\n      };\n\n      _forEach(this._introItems, function (item, i) {\n        var innerLi = document.createElement('li');\n        var anchorLink = document.createElement('a');\n\n        innerLi.setAttribute('role', 'presentation');\n        anchorLink.setAttribute('role', 'tab');\n\n        anchorLink.onclick = anchorClick;\n\n        if (i === targetElement.step - 1) {\n          anchorLink.className = 'active';\n        }\n\n        _setAnchorAsButton(anchorLink);\n        anchorLink.innerHTML = \"&nbsp;\";\n        anchorLink.setAttribute('data-stepnumber', item.step);\n\n        innerLi.appendChild(anchorLink);\n        ulContainer.appendChild(innerLi);\n      });\n\n      bulletsLayer.appendChild(ulContainer);\n\n      progressLayer.className = 'introjs-progress';\n\n      if (this._options.showProgress === false) {\n        progressLayer.style.display = 'none';\n      }\n      var progressBar = document.createElement('div');\n      progressBar.className = 'introjs-progressbar';\n      progressBar.setAttribute('role', 'progress');\n      progressBar.setAttribute('aria-valuemin', 0);\n      progressBar.setAttribute('aria-valuemax', 100);\n      progressBar.setAttribute('aria-valuenow', _getProgress.call(this));\n      progressBar.style.cssText = 'width:' + _getProgress.call(this) + '%;';\n\n      progressLayer.appendChild(progressBar);\n\n      buttonsLayer.className = 'introjs-tooltipbuttons';\n      if (this._options.showButtons === false) {\n        buttonsLayer.style.display = 'none';\n      }\n\n      tooltipLayer.className = 'introjs-tooltip';\n      tooltipLayer.appendChild(tooltipTextLayer);\n      tooltipLayer.appendChild(bulletsLayer);\n      tooltipLayer.appendChild(progressLayer);\n\n      //add helper layer number\n      var helperNumberLayer = document.createElement('span');\n      if (this._options.showStepNumbers === true) {\n        helperNumberLayer.className = 'introjs-helperNumberLayer';\n        helperNumberLayer.innerHTML = targetElement.step;\n        referenceLayer.appendChild(helperNumberLayer);\n      }\n\n      tooltipLayer.appendChild(arrowLayer);\n      referenceLayer.appendChild(tooltipLayer);\n\n      //next button\n      nextTooltipButton = document.createElement('a');\n\n      nextTooltipButton.onclick = function () {\n        if (self._introItems.length - 1 !== self._currentStep) {\n          _nextStep.call(self);\n        }\n      };\n\n      _setAnchorAsButton(nextTooltipButton);\n      nextTooltipButton.innerHTML = this._options.nextLabel;\n\n      //previous button\n      prevTooltipButton = document.createElement('a');\n\n      prevTooltipButton.onclick = function () {\n        if (self._currentStep !== 0) {\n          _previousStep.call(self);\n        }\n      };\n\n      _setAnchorAsButton(prevTooltipButton);\n      prevTooltipButton.innerHTML = this._options.prevLabel;\n\n      //skip button\n      skipTooltipButton = document.createElement('a');\n      skipTooltipButton.className = this._options.buttonClass + ' introjs-skipbutton ';\n      _setAnchorAsButton(skipTooltipButton);\n      skipTooltipButton.innerHTML = this._options.skipLabel;\n\n      skipTooltipButton.onclick = function () {\n        if (self._introItems.length - 1 === self._currentStep && typeof self._introCompleteCallback === 'function') {\n          self._introCompleteCallback.call(self);\n        }\n\n        if (self._introItems.length - 1 !== self._currentStep && typeof self._introExitCallback === 'function') {\n          self._introExitCallback.call(self);\n        }\n\n        if (typeof self._introSkipCallback === 'function') {\n          self._introSkipCallback.call(self);\n        }\n\n        _exitIntro.call(self, self._targetElement);\n      };\n\n      buttonsLayer.appendChild(skipTooltipButton);\n\n      //in order to prevent displaying next/previous button always\n      if (this._introItems.length > 1) {\n        buttonsLayer.appendChild(prevTooltipButton);\n        buttonsLayer.appendChild(nextTooltipButton);\n      }\n\n      tooltipLayer.appendChild(buttonsLayer);\n\n      //set proper position\n      _placeTooltip.call(self, targetElement.element, tooltipLayer, arrowLayer, helperNumberLayer);\n\n      // change the scroll of the window, if needed\n      _scrollTo.call(this, targetElement.scrollTo, targetElement, tooltipLayer);\n\n      //end of new element if-else condition\n    }\n\n    // removing previous disable interaction layer\n    var disableInteractionLayer = self._targetElement.querySelector('.introjs-disableInteraction');\n    if (disableInteractionLayer) {\n      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);\n    }\n\n    //disable interaction\n    if (targetElement.disableInteraction) {\n      _disableInteraction.call(self);\n    }\n\n    // when it's the first step of tour\n    if (this._currentStep === 0 && this._introItems.length > 1) {\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.className = this._options.buttonClass + ' introjs-skipbutton';\n      }\n      if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n        nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton';\n      }\n\n      if (this._options.hidePrev === true) {\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton introjs-hidden';\n        }\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          _addClass(nextTooltipButton, 'introjs-fullbutton');\n        }\n      } else {\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton introjs-disabled';\n        }\n      }\n\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.innerHTML = this._options.skipLabel;\n      }\n    } else if (this._introItems.length - 1 === this._currentStep || this._introItems.length === 1) {\n      // last step of tour\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.innerHTML = this._options.doneLabel;\n        // adding donebutton class in addition to skipbutton\n        _addClass(skipTooltipButton, 'introjs-donebutton');\n      }\n      if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n        prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton';\n      }\n\n      if (this._options.hideNext === true) {\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton introjs-hidden';\n        }\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          _addClass(prevTooltipButton, 'introjs-fullbutton');\n        }\n      } else {\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton introjs-disabled';\n        }\n      }\n    } else {\n      // steps between start and end\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.className = this._options.buttonClass + ' introjs-skipbutton';\n      }\n      if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n        prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton';\n      }\n      if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n        nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton';\n      }\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.innerHTML = this._options.skipLabel;\n      }\n    }\n\n    prevTooltipButton.setAttribute('role', 'button');\n    nextTooltipButton.setAttribute('role', 'button');\n    skipTooltipButton.setAttribute('role', 'button');\n\n    //Set focus on \"next\" button, so that hitting Enter always moves you onto the next step\n    if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n      nextTooltipButton.focus();\n    }\n\n    _setShowElement(targetElement);\n\n    if (typeof this._introAfterChangeCallback !== 'undefined') {\n      this._introAfterChangeCallback.call(this, targetElement.element);\n    }\n  }\n\n  /**\n   * To change the scroll of `window` after highlighting an element\n   *\n   * @api private\n   * @method _scrollTo\n   * @param {String} scrollTo\n   * @param {Object} targetElement\n   * @param {Object} tooltipLayer\n   */\n  function _scrollTo(scrollTo, targetElement, tooltipLayer) {\n    if (scrollTo === 'off') return;\n    var rect;\n\n    if (!this._options.scrollToElement) return;\n\n    if (scrollTo === 'tooltip') {\n      rect = tooltipLayer.getBoundingClientRect();\n    } else {\n      rect = targetElement.element.getBoundingClientRect();\n    }\n\n    if (!_elementInViewport(targetElement.element)) {\n      var winHeight = _getWinSize().height;\n      var top = rect.bottom - (rect.bottom - rect.top);\n\n      // TODO (afshinm): do we need scroll padding now?\n      // I have changed the scroll option and now it scrolls the window to\n      // the center of the target element or tooltip.\n\n      if (top < 0 || targetElement.element.clientHeight > winHeight) {\n        window.scrollBy(0, rect.top - (winHeight / 2 - rect.height / 2) - this._options.scrollPadding); // 30px padding from edge to look nice\n\n        //Scroll down\n      } else {\n        window.scrollBy(0, rect.top - (winHeight / 2 - rect.height / 2) + this._options.scrollPadding); // 30px padding from edge to look nice\n      }\n    }\n  }\n\n  /**\n   * To remove all show element(s)\n   *\n   * @api private\n   * @method _removeShowElement\n   */\n  function _removeShowElement() {\n    var elms = document.querySelectorAll('.introjs-showElement');\n\n    _forEach(elms, function (elm) {\n      _removeClass(elm, /introjs-[a-zA-Z]+/g);\n    });\n  }\n\n  /**\n   * To set the show element\n   * This function set a relative (in most cases) position and changes the z-index\n   *\n   * @api private\n   * @method _setShowElement\n   * @param {Object} targetElement\n   */\n  function _setShowElement(targetElement) {\n    var parentElm;\n    // we need to add this show element class to the parent of SVG elements\n    // because the SVG elements can't have independent z-index\n    if (targetElement.element instanceof SVGElement) {\n      parentElm = targetElement.element.parentNode;\n\n      while (targetElement.element.parentNode !== null) {\n        if (!parentElm.tagName || parentElm.tagName.toLowerCase() === 'body') break;\n\n        if (parentElm.tagName.toLowerCase() === 'svg') {\n          _addClass(parentElm, 'introjs-showElement introjs-relativePosition');\n        }\n\n        parentElm = parentElm.parentNode;\n      }\n    }\n\n    _addClass(targetElement.element, 'introjs-showElement');\n\n    var currentElementPosition = _getPropValue(targetElement.element, 'position');\n    if (currentElementPosition !== 'absolute' && currentElementPosition !== 'relative' && currentElementPosition !== 'fixed') {\n      //change to new intro item\n      _addClass(targetElement.element, 'introjs-relativePosition');\n    }\n\n    parentElm = targetElement.element.parentNode;\n    while (parentElm !== null) {\n      if (!parentElm.tagName || parentElm.tagName.toLowerCase() === 'body') break;\n\n      //fix The Stacking Context problem.\n      //More detail: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context\n      var zIndex = _getPropValue(parentElm, 'z-index');\n      var opacity = parseFloat(_getPropValue(parentElm, 'opacity'));\n      var transform = _getPropValue(parentElm, 'transform') || _getPropValue(parentElm, '-webkit-transform') || _getPropValue(parentElm, '-moz-transform') || _getPropValue(parentElm, '-ms-transform') || _getPropValue(parentElm, '-o-transform');\n      if (/[0-9]+/.test(zIndex) || opacity < 1 || transform !== 'none' && transform !== undefined) {\n        _addClass(parentElm, 'introjs-fixParent');\n      }\n\n      parentElm = parentElm.parentNode;\n    }\n  }\n\n  /**\n  * Iterates arrays\n  *\n  * @param {Array} arr\n  * @param {Function} forEachFnc\n  * @param {Function} completeFnc\n  * @return {Null}\n  */\n  function _forEach(arr, forEachFnc, completeFnc) {\n    // in case arr is an empty query selector node list\n    if (arr) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        forEachFnc(arr[i], i);\n      }\n    }\n\n    if (typeof completeFnc === 'function') {\n      completeFnc();\n    }\n  }\n\n  /**\n  * Mark any object with an incrementing number\n  * used for keeping track of objects\n  *\n  * @param Object obj   Any object or DOM Element\n  * @param String key\n  * @return Object\n  */\n  var _stamp = function () {\n    var keys = {};\n    return function stamp(obj, key) {\n\n      // get group key\n      key = key || 'introjs-stamp';\n\n      // each group increments from 0\n      keys[key] = keys[key] || 0;\n\n      // stamp only once per object\n      if (obj[key] === undefined) {\n        // increment key for each new object\n        obj[key] = keys[key]++;\n      }\n\n      return obj[key];\n    };\n  }();\n\n  /**\n  * DOMEvent Handles all DOM events\n  *\n  * methods:\n  *\n  * on - add event handler\n  * off - remove event\n  */\n  var DOMEvent = function () {\n    function DOMEvent() {\n      var events_key = 'introjs_event';\n\n      /**\n      * Gets a unique ID for an event listener\n      *\n      * @param Object obj\n      * @param String type        event type\n      * @param Function listener\n      * @param Object context\n      * @return String\n      */\n      this._id = function (obj, type, listener, context) {\n        return type + _stamp(listener) + (context ? '_' + _stamp(context) : '');\n      };\n\n      /**\n      * Adds event listener\n      *\n      * @param Object obj\n      * @param String type        event type\n      * @param Function listener\n      * @param Object context\n      * @param Boolean useCapture\n      * @return null\n      */\n      this.on = function (obj, type, listener, context, useCapture) {\n        var id = this._id.apply(this, arguments),\n            handler = function handler(e) {\n          return listener.call(context || obj, e || window.event);\n        };\n\n        if ('addEventListener' in obj) {\n          obj.addEventListener(type, handler, useCapture);\n        } else if ('attachEvent' in obj) {\n          obj.attachEvent('on' + type, handler);\n        }\n\n        obj[events_key] = obj[events_key] || {};\n        obj[events_key][id] = handler;\n      };\n\n      /**\n      * Removes event listener\n      *\n      * @param Object obj\n      * @param String type        event type\n      * @param Function listener\n      * @param Object context\n      * @param Boolean useCapture\n      * @return null\n      */\n      this.off = function (obj, type, listener, context, useCapture) {\n        var id = this._id.apply(this, arguments),\n            handler = obj[events_key] && obj[events_key][id];\n\n        if (!handler) {\n          return;\n        }\n\n        if ('removeEventListener' in obj) {\n          obj.removeEventListener(type, handler, useCapture);\n        } else if ('detachEvent' in obj) {\n          obj.detachEvent('on' + type, handler);\n        }\n\n        obj[events_key][id] = null;\n      };\n    }\n\n    return new DOMEvent();\n  }();\n\n  /**\n   * Append a class to an element\n   *\n   * @api private\n   * @method _addClass\n   * @param {Object} element\n   * @param {String} className\n   * @returns null\n   */\n  function _addClass(element, className) {\n    if (element instanceof SVGElement) {\n      // svg\n      var pre = element.getAttribute('class') || '';\n\n      element.setAttribute('class', pre + ' ' + className);\n    } else {\n      if (element.classList !== undefined) {\n        // check for modern classList property\n        var classes = className.split(' ');\n        _forEach(classes, function (cls) {\n          element.classList.add(cls);\n        });\n      } else if (!element.className.match(className)) {\n        // check if element doesn't already have className\n        element.className += ' ' + className;\n      }\n    }\n  }\n\n  /**\n   * Remove a class from an element\n   *\n   * @api private\n   * @method _removeClass\n   * @param {Object} element\n   * @param {RegExp|String} classNameRegex can be regex or string\n   * @returns null\n   */\n  function _removeClass(element, classNameRegex) {\n    if (element instanceof SVGElement) {\n      var pre = element.getAttribute('class') || '';\n\n      element.setAttribute('class', pre.replace(classNameRegex, '').replace(/^\\s+|\\s+$/g, ''));\n    } else {\n      element.className = element.className.replace(classNameRegex, '').replace(/^\\s+|\\s+$/g, '');\n    }\n  }\n\n  /**\n   * Get an element CSS property on the page\n   * Thanks to JavaScript Kit: http://www.javascriptkit.com/dhtmltutors/dhtmlcascade4.shtml\n   *\n   * @api private\n   * @method _getPropValue\n   * @param {Object} element\n   * @param {String} propName\n   * @returns Element's property value\n   */\n  function _getPropValue(element, propName) {\n    var propValue = '';\n    if (element.currentStyle) {\n      //IE\n      propValue = element.currentStyle[propName];\n    } else if (document.defaultView && document.defaultView.getComputedStyle) {\n      //Others\n      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);\n    }\n\n    //Prevent exception in IE\n    if (propValue && propValue.toLowerCase) {\n      return propValue.toLowerCase();\n    } else {\n      return propValue;\n    }\n  }\n\n  /**\n   * Checks to see if target element (or parents) position is fixed or not\n   *\n   * @api private\n   * @method _isFixed\n   * @param {Object} element\n   * @returns Boolean\n   */\n  function _isFixed(element) {\n    var p = element.parentNode;\n\n    if (!p || p.nodeName === 'HTML') {\n      return false;\n    }\n\n    if (_getPropValue(element, 'position') === 'fixed') {\n      return true;\n    }\n\n    return _isFixed(p);\n  }\n\n  /**\n   * Provides a cross-browser way to get the screen dimensions\n   * via: http://stackoverflow.com/questions/5864467/internet-explorer-innerheight\n   *\n   * @api private\n   * @method _getWinSize\n   * @returns {Object} width and height attributes\n   */\n  function _getWinSize() {\n    if (window.innerWidth !== undefined) {\n      return { width: window.innerWidth, height: window.innerHeight };\n    } else {\n      var D = document.documentElement;\n      return { width: D.clientWidth, height: D.clientHeight };\n    }\n  }\n\n  /**\n   * Check to see if the element is in the viewport or not\n   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport\n   *\n   * @api private\n   * @method _elementInViewport\n   * @param {Object} el\n   */\n  function _elementInViewport(el) {\n    var rect = el.getBoundingClientRect();\n\n    return rect.top >= 0 && rect.left >= 0 && rect.bottom + 80 <= window.innerHeight && // add 80 to get the text right\n    rect.right <= window.innerWidth;\n  }\n\n  /**\n   * Add overlay layer to the page\n   *\n   * @api private\n   * @method _addOverlayLayer\n   * @param {Object} targetElm\n   */\n  function _addOverlayLayer(targetElm) {\n    var overlayLayer = document.createElement('div'),\n        styleText = '',\n        self = this;\n\n    //set css class name\n    overlayLayer.className = 'introjs-overlay';\n\n    //check if the target element is body, we should calculate the size of overlay layer in a better way\n    if (!targetElm.tagName || targetElm.tagName.toLowerCase() === 'body') {\n      styleText += 'top: 0;bottom: 0; left: 0;right: 0;position: fixed;';\n      overlayLayer.style.cssText = styleText;\n    } else {\n      //set overlay layer position\n      var elementPosition = _getOffset(targetElm);\n      if (elementPosition) {\n        styleText += 'width: ' + elementPosition.width + 'px; height:' + elementPosition.height + 'px; top:' + elementPosition.top + 'px;left: ' + elementPosition.left + 'px;';\n        overlayLayer.style.cssText = styleText;\n      }\n    }\n\n    targetElm.appendChild(overlayLayer);\n\n    overlayLayer.onclick = function () {\n      if (self._options.exitOnOverlayClick === true) {\n        _exitIntro.call(self, targetElm);\n      }\n    };\n\n    window.setTimeout(function () {\n      styleText += 'opacity: ' + self._options.overlayOpacity.toString() + ';';\n      overlayLayer.style.cssText = styleText;\n    }, 10);\n\n    return true;\n  }\n\n  /**\n   * Removes open hint (tooltip hint)\n   *\n   * @api private\n   * @method _removeHintTooltip\n   */\n  function _removeHintTooltip() {\n    var tooltip = document.querySelector('.introjs-hintReference');\n\n    if (tooltip) {\n      var step = tooltip.getAttribute('data-step');\n      tooltip.parentNode.removeChild(tooltip);\n      return step;\n    }\n  }\n\n  /**\n   * Start parsing hint items\n   *\n   * @api private\n   * @param {Object} targetElm\n   * @method _startHint\n   */\n  function _populateHints(targetElm) {\n\n    this._introItems = [];\n\n    if (this._options.hints) {\n      _forEach(this._options.hints, function (hint) {\n        var currentItem = _cloneObject(hint);\n\n        if (typeof currentItem.element === 'string') {\n          //grab the element with given selector from the page\n          currentItem.element = document.querySelector(currentItem.element);\n        }\n\n        currentItem.hintPosition = currentItem.hintPosition || this._options.hintPosition;\n        currentItem.hintAnimation = currentItem.hintAnimation || this._options.hintAnimation;\n\n        if (currentItem.element !== null) {\n          this._introItems.push(currentItem);\n        }\n      }.bind(this));\n    } else {\n      var hints = targetElm.querySelectorAll('*[data-hint]');\n\n      if (!hints || !hints.length) {\n        return false;\n      }\n\n      //first add intro items with data-step\n      _forEach(hints, function (currentElement) {\n        // hint animation\n        var hintAnimation = currentElement.getAttribute('data-hintanimation');\n\n        if (hintAnimation) {\n          hintAnimation = hintAnimation === 'true';\n        } else {\n          hintAnimation = this._options.hintAnimation;\n        }\n\n        this._introItems.push({\n          element: currentElement,\n          hint: currentElement.getAttribute('data-hint'),\n          hintPosition: currentElement.getAttribute('data-hintposition') || this._options.hintPosition,\n          hintAnimation: hintAnimation,\n          tooltipClass: currentElement.getAttribute('data-tooltipclass'),\n          position: currentElement.getAttribute('data-position') || this._options.tooltipPosition\n        });\n      }.bind(this));\n    }\n\n    _addHints.call(this);\n\n    /* \n    todo:\n    these events should be removed at some point \n    */\n    DOMEvent.on(document, 'click', _removeHintTooltip, this, false);\n    DOMEvent.on(window, 'resize', _reAlignHints, this, true);\n  }\n\n  /**\n   * Re-aligns all hint elements\n   *\n   * @api private\n   * @method _reAlignHints\n   */\n  function _reAlignHints() {\n    _forEach(this._introItems, function (item) {\n      if (typeof item.targetElement === 'undefined') {\n        return;\n      }\n\n      _alignHintPosition.call(this, item.hintPosition, item.element, item.targetElement);\n    }.bind(this));\n  }\n\n  /**\n  * Get a queryselector within the hint wrapper\n  *\n  * @param {String} selector\n  * @return {NodeList|Array}\n  */\n  function _hintQuerySelectorAll(selector) {\n    var hintsWrapper = document.querySelector('.introjs-hints');\n    return hintsWrapper ? hintsWrapper.querySelectorAll(selector) : [];\n  }\n\n  /**\n   * Hide a hint\n   *\n   * @api private\n   * @method _hideHint\n   */\n  function _hideHint(stepId) {\n    var hint = _hintQuerySelectorAll('.introjs-hint[data-step=\"' + stepId + '\"]')[0];\n\n    _removeHintTooltip.call(this);\n\n    if (hint) {\n      _addClass(hint, 'introjs-hidehint');\n    }\n\n    // call the callback function (if any)\n    if (typeof this._hintCloseCallback !== 'undefined') {\n      this._hintCloseCallback.call(this, stepId);\n    }\n  }\n\n  /**\n   * Hide all hints\n   *\n   * @api private\n   * @method _hideHints\n   */\n  function _hideHints() {\n    var hints = _hintQuerySelectorAll('.introjs-hint');\n\n    _forEach(hints, function (hint) {\n      _hideHint.call(this, hint.getAttribute('data-step'));\n    }.bind(this));\n  }\n\n  /**\n   * Show all hints\n   *\n   * @api private\n   * @method _showHints\n   */\n  function _showHints() {\n    var hints = _hintQuerySelectorAll('.introjs-hint');\n\n    if (hints && hints.length) {\n      _forEach(hints, function (hint) {\n        _showHint.call(this, hint.getAttribute('data-step'));\n      }.bind(this));\n    } else {\n      _populateHints.call(this, this._targetElement);\n    }\n  }\n\n  /**\n   * Show a hint\n   *\n   * @api private\n   * @method _showHint\n   */\n  function _showHint(stepId) {\n    var hint = _hintQuerySelectorAll('.introjs-hint[data-step=\"' + stepId + '\"]')[0];\n\n    if (hint) {\n      _removeClass(hint, /introjs-hidehint/g);\n    }\n  }\n\n  /**\n   * Removes all hint elements on the page\n   * Useful when you want to destroy the elements and add them again (e.g. a modal or popup)\n   *\n   * @api private\n   * @method _removeHints\n   */\n  function _removeHints() {\n    var hints = _hintQuerySelectorAll('.introjs-hint');\n\n    _forEach(hints, function (hint) {\n      _removeHint.call(this, hint.getAttribute('data-step'));\n    }.bind(this));\n  }\n\n  /**\n   * Remove one single hint element from the page\n   * Useful when you want to destroy the element and add them again (e.g. a modal or popup)\n   * Use removeHints if you want to remove all elements.\n   *\n   * @api private\n   * @method _removeHint\n   */\n  function _removeHint(stepId) {\n    var hint = _hintQuerySelectorAll('.introjs-hint[data-step=\"' + stepId + '\"]')[0];\n\n    if (hint) {\n      hint.parentNode.removeChild(hint);\n    }\n  }\n\n  /**\n   * Add all available hints to the page\n   *\n   * @api private\n   * @method _addHints\n   */\n  function _addHints() {\n    var self = this;\n\n    var hintsWrapper = document.querySelector('.introjs-hints');\n\n    if (hintsWrapper === null) {\n      hintsWrapper = document.createElement('div');\n      hintsWrapper.className = 'introjs-hints';\n    }\n\n    /**\n    * Returns an event handler unique to the hint iteration\n    * \n    * @param {Integer} i\n    * @return {Function}\n    */\n    var getHintClick = function getHintClick(i) {\n      return function (e) {\n        var evt = e ? e : window.event;\n\n        if (evt.stopPropagation) {\n          evt.stopPropagation();\n        }\n\n        if (evt.cancelBubble !== null) {\n          evt.cancelBubble = true;\n        }\n\n        _showHintDialog.call(self, i);\n      };\n    };\n\n    _forEach(this._introItems, function (item, i) {\n      // avoid append a hint twice\n      if (document.querySelector('.introjs-hint[data-step=\"' + i + '\"]')) {\n        return;\n      }\n\n      var hint = document.createElement('a');\n      _setAnchorAsButton(hint);\n\n      hint.onclick = getHintClick(i);\n\n      hint.className = 'introjs-hint';\n\n      if (!item.hintAnimation) {\n        _addClass(hint, 'introjs-hint-no-anim');\n      }\n\n      // hint's position should be fixed if the target element's position is fixed\n      if (_isFixed(item.element)) {\n        _addClass(hint, 'introjs-fixedhint');\n      }\n\n      var hintDot = document.createElement('div');\n      hintDot.className = 'introjs-hint-dot';\n      var hintPulse = document.createElement('div');\n      hintPulse.className = 'introjs-hint-pulse';\n\n      hint.appendChild(hintDot);\n      hint.appendChild(hintPulse);\n      hint.setAttribute('data-step', i);\n\n      // we swap the hint element with target element\n      // because _setHelperLayerPosition uses `element` property\n      item.targetElement = item.element;\n      item.element = hint;\n\n      // align the hint position\n      _alignHintPosition.call(this, item.hintPosition, hint, item.targetElement);\n\n      hintsWrapper.appendChild(hint);\n    }.bind(this));\n\n    // adding the hints wrapper\n    document.body.appendChild(hintsWrapper);\n\n    // call the callback function (if any)\n    if (typeof this._hintsAddedCallback !== 'undefined') {\n      this._hintsAddedCallback.call(this);\n    }\n  }\n\n  /**\n   * Aligns hint position\n   *\n   * @api private\n   * @method _alignHintPosition\n   * @param {String} position\n   * @param {Object} hint\n   * @param {Object} element\n   */\n  function _alignHintPosition(position, hint, element) {\n    // get/calculate offset of target element\n    var offset = _getOffset.call(this, element);\n    var iconWidth = 20;\n    var iconHeight = 20;\n\n    // align the hint element\n    switch (position) {\n      default:\n      case 'top-left':\n        hint.style.left = offset.left + 'px';\n        hint.style.top = offset.top + 'px';\n        break;\n      case 'top-right':\n        hint.style.left = offset.left + offset.width - iconWidth + 'px';\n        hint.style.top = offset.top + 'px';\n        break;\n      case 'bottom-left':\n        hint.style.left = offset.left + 'px';\n        hint.style.top = offset.top + offset.height - iconHeight + 'px';\n        break;\n      case 'bottom-right':\n        hint.style.left = offset.left + offset.width - iconWidth + 'px';\n        hint.style.top = offset.top + offset.height - iconHeight + 'px';\n        break;\n      case 'middle-left':\n        hint.style.left = offset.left + 'px';\n        hint.style.top = offset.top + (offset.height - iconHeight) / 2 + 'px';\n        break;\n      case 'middle-right':\n        hint.style.left = offset.left + offset.width - iconWidth + 'px';\n        hint.style.top = offset.top + (offset.height - iconHeight) / 2 + 'px';\n        break;\n      case 'middle-middle':\n        hint.style.left = offset.left + (offset.width - iconWidth) / 2 + 'px';\n        hint.style.top = offset.top + (offset.height - iconHeight) / 2 + 'px';\n        break;\n      case 'bottom-middle':\n        hint.style.left = offset.left + (offset.width - iconWidth) / 2 + 'px';\n        hint.style.top = offset.top + offset.height - iconHeight + 'px';\n        break;\n      case 'top-middle':\n        hint.style.left = offset.left + (offset.width - iconWidth) / 2 + 'px';\n        hint.style.top = offset.top + 'px';\n        break;\n    }\n  }\n\n  /**\n   * Triggers when user clicks on the hint element\n   *\n   * @api private\n   * @method _showHintDialog\n   * @param {Number} stepId\n   */\n  function _showHintDialog(stepId) {\n    var hintElement = document.querySelector('.introjs-hint[data-step=\"' + stepId + '\"]');\n    var item = this._introItems[stepId];\n\n    // call the callback function (if any)\n    if (typeof this._hintClickCallback !== 'undefined') {\n      this._hintClickCallback.call(this, hintElement, item, stepId);\n    }\n\n    // remove all open tooltips\n    var removedStep = _removeHintTooltip.call(this);\n\n    // to toggle the tooltip\n    if (parseInt(removedStep, 10) === stepId) {\n      return;\n    }\n\n    var tooltipLayer = document.createElement('div');\n    var tooltipTextLayer = document.createElement('div');\n    var arrowLayer = document.createElement('div');\n    var referenceLayer = document.createElement('div');\n\n    tooltipLayer.className = 'introjs-tooltip';\n\n    tooltipLayer.onclick = function (e) {\n      //IE9 & Other Browsers\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      }\n      //IE8 and Lower\n      else {\n          e.cancelBubble = true;\n        }\n    };\n\n    tooltipTextLayer.className = 'introjs-tooltiptext';\n\n    var tooltipWrapper = document.createElement('p');\n    tooltipWrapper.innerHTML = item.hint;\n\n    var closeButton = document.createElement('a');\n    closeButton.className = this._options.buttonClass;\n    closeButton.setAttribute('role', 'button');\n    closeButton.innerHTML = this._options.hintButtonLabel;\n    closeButton.onclick = _hideHint.bind(this, stepId);\n\n    tooltipTextLayer.appendChild(tooltipWrapper);\n    tooltipTextLayer.appendChild(closeButton);\n\n    arrowLayer.className = 'introjs-arrow';\n    tooltipLayer.appendChild(arrowLayer);\n\n    tooltipLayer.appendChild(tooltipTextLayer);\n\n    // set current step for _placeTooltip function\n    this._currentStep = hintElement.getAttribute('data-step');\n\n    // align reference layer position\n    referenceLayer.className = 'introjs-tooltipReferenceLayer introjs-hintReference';\n    referenceLayer.setAttribute('data-step', hintElement.getAttribute('data-step'));\n    _setHelperLayerPosition.call(this, referenceLayer);\n\n    referenceLayer.appendChild(tooltipLayer);\n    document.body.appendChild(referenceLayer);\n\n    //set proper position\n    _placeTooltip.call(this, hintElement, tooltipLayer, arrowLayer, null, true);\n  }\n\n  /**\n   * Get an element position on the page\n   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966\n   *\n   * @api private\n   * @method _getOffset\n   * @param {Object} element\n   * @returns Element's position info\n   */\n  function _getOffset(element) {\n    var body = document.body;\n    var docEl = document.documentElement;\n    var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n    var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\n    var x = element.getBoundingClientRect();\n    return {\n      top: x.top + scrollTop,\n      width: x.width,\n      height: x.height,\n      left: x.left + scrollLeft\n    };\n  }\n\n  /**\n  * Find the nearest scrollable parent\n  * copied from https://stackoverflow.com/questions/35939886/find-first-scrollable-parent\n  *\n  * @param Element element\n  * @return Element\n  */\n  function _getScrollParent(element) {\n    var style = window.getComputedStyle(element);\n    var excludeStaticParent = style.position === \"absolute\";\n    var overflowRegex = /(auto|scroll)/;\n\n    if (style.position === \"fixed\") return document.body;\n\n    for (var parent = element; parent = parent.parentElement;) {\n      style = window.getComputedStyle(parent);\n      if (excludeStaticParent && style.position === \"static\") {\n        continue;\n      }\n      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;\n    }\n\n    return document.body;\n  }\n\n  /**\n  * scroll a scrollable element to a child element\n  *\n  * @param Element parent\n  * @param Element element\n  * @return Null\n  */\n  function _scrollParentToElement(parent, element) {\n    parent.scrollTop = element.offsetTop - parent.offsetTop;\n  }\n\n  /**\n   * Gets the current progress percentage\n   *\n   * @api private\n   * @method _getProgress\n   * @returns current progress percentage\n   */\n  function _getProgress() {\n    // Steps are 0 indexed\n    var currentStep = parseInt(this._currentStep + 1, 10);\n    return currentStep / this._introItems.length * 100;\n  }\n\n  /**\n   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically\n   *\n   * @param obj1\n   * @param obj2\n   * @returns obj3 a new object based on obj1 and obj2\n   */\n  function _mergeOptions(obj1, obj2) {\n    var obj3 = {},\n        attrname;\n    for (attrname in obj1) {\n      obj3[attrname] = obj1[attrname];\n    }\n    for (attrname in obj2) {\n      obj3[attrname] = obj2[attrname];\n    }\n    return obj3;\n  }\n\n  var introJs = function introJs(targetElm) {\n    var instance;\n\n    if ((typeof targetElm === \"undefined\" ? \"undefined\" : _typeof(targetElm)) === 'object') {\n      //Ok, create a new instance\n      instance = new IntroJs(targetElm);\n    } else if (typeof targetElm === 'string') {\n      //select the target element with query selector\n      var targetElement = document.querySelector(targetElm);\n\n      if (targetElement) {\n        instance = new IntroJs(targetElement);\n      } else {\n        throw new Error('There is no element with given selector.');\n      }\n    } else {\n      instance = new IntroJs(document.body);\n    }\n    // add instance to list of _instances\n    // passing group to _stamp to increment\n    // from 0 onward somewhat reliably\n    introJs.instances[_stamp(instance, 'introjs-instance')] = instance;\n\n    return instance;\n  };\n\n  /**\n   * Current IntroJs version\n   *\n   * @property version\n   * @type String\n   */\n  introJs.version = VERSION;\n\n  /**\n  * key-val object helper for introJs instances\n  *\n  * @property instances\n  * @type Object\n  */\n  introJs.instances = {};\n\n  //Prototype\n  introJs.fn = IntroJs.prototype = {\n    clone: function clone() {\n      return new IntroJs(this);\n    },\n    setOption: function setOption(option, value) {\n      this._options[option] = value;\n      return this;\n    },\n    setOptions: function setOptions(options) {\n      this._options = _mergeOptions(this._options, options);\n      return this;\n    },\n    start: function start(group) {\n      _introForElement.call(this, this._targetElement, group);\n      return this;\n    },\n    goToStep: function goToStep(step) {\n      _goToStep.call(this, step);\n      return this;\n    },\n    addStep: function addStep(options) {\n      if (!this._options.steps) {\n        this._options.steps = [];\n      }\n\n      this._options.steps.push(options);\n\n      return this;\n    },\n    addSteps: function addSteps(steps) {\n      if (!steps.length) return;\n\n      for (var index = 0; index < steps.length; index++) {\n        this.addStep(steps[index]);\n      }\n\n      return this;\n    },\n    goToStepNumber: function goToStepNumber(step) {\n      _goToStepNumber.call(this, step);\n\n      return this;\n    },\n    nextStep: function nextStep() {\n      _nextStep.call(this);\n      return this;\n    },\n    previousStep: function previousStep() {\n      _previousStep.call(this);\n      return this;\n    },\n    exit: function exit(force) {\n      _exitIntro.call(this, this._targetElement, force);\n      return this;\n    },\n    refresh: function refresh() {\n      _refresh.call(this);\n      return this;\n    },\n    onbeforechange: function onbeforechange(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introBeforeChangeCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onbeforechange was not a function');\n      }\n      return this;\n    },\n    onchange: function onchange(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introChangeCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onchange was not a function.');\n      }\n      return this;\n    },\n    onafterchange: function onafterchange(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introAfterChangeCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onafterchange was not a function');\n      }\n      return this;\n    },\n    oncomplete: function oncomplete(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introCompleteCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for oncomplete was not a function.');\n      }\n      return this;\n    },\n    onhintsadded: function onhintsadded(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._hintsAddedCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onhintsadded was not a function.');\n      }\n      return this;\n    },\n    onhintclick: function onhintclick(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._hintClickCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onhintclick was not a function.');\n      }\n      return this;\n    },\n    onhintclose: function onhintclose(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._hintCloseCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onhintclose was not a function.');\n      }\n      return this;\n    },\n    onexit: function onexit(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introExitCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onexit was not a function.');\n      }\n      return this;\n    },\n    onskip: function onskip(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introSkipCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onskip was not a function.');\n      }\n      return this;\n    },\n    onbeforeexit: function onbeforeexit(providedCallback) {\n      if (typeof providedCallback === 'function') {\n        this._introBeforeExitCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onbeforeexit was not a function.');\n      }\n      return this;\n    },\n    addHints: function addHints() {\n      _populateHints.call(this, this._targetElement);\n      return this;\n    },\n    hideHint: function hideHint(stepId) {\n      _hideHint.call(this, stepId);\n      return this;\n    },\n    hideHints: function hideHints() {\n      _hideHints.call(this);\n      return this;\n    },\n    showHint: function showHint(stepId) {\n      _showHint.call(this, stepId);\n      return this;\n    },\n    showHints: function showHints() {\n      _showHints.call(this);\n      return this;\n    },\n    removeHints: function removeHints() {\n      _removeHints.call(this);\n      return this;\n    },\n    removeHint: function removeHint(stepId) {\n      _removeHint.call(this, stepId);\n      return this;\n    },\n    showHintDialog: function showHintDialog(stepId) {\n      _showHintDialog.call(this, stepId);\n      return this;\n    }\n  };\n\n  return introJs;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/intro.js\n");

/***/ }),

/***/ "./assets/introjs.css":
/*!****************************!*\
  !*** ./assets/introjs.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(/*! !../node_modules/css-loader!./introjs.css */ \"./node_modules/css-loader/index.js!./assets/introjs.css\");\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(/*! ../node_modules/style-loader/lib/addStyles.js */ \"./node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9hc3NldHMvaW50cm9qcy5jc3M/ZTFkZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLDBHQUFxRDs7QUFFM0UsNENBQTRDLFFBQVM7O0FBRXJEO0FBQ0E7Ozs7QUFJQSxlQUFlOztBQUVmO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLG1HQUFnRDs7QUFFckU7O0FBRUEsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiLi9hc3NldHMvaW50cm9qcy5jc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbnRyb2pzLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbnRyb2pzLmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vaW50cm9qcy5jc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/introjs.css\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./assets/introjs.css":
/*!******************************************************!*\
  !*** ./node_modules/css-loader!./assets/introjs.css ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \".introjs-overlay {\\n  position: absolute;\\n  box-sizing: content-box;\\n  z-index: 999999;\\n  background-color: #000;\\n  opacity: 0;\\n  background: -moz-radial-gradient(center,ellipse farthest-corner,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);\\n  background: -webkit-gradient(radial,center center,0px,center center,100%,color-stop(0%,rgba(0,0,0,0.4)),color-stop(100%,rgba(0,0,0,0.9)));\\n  background: -webkit-radial-gradient(center,ellipse farthest-corner,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);\\n  background: -o-radial-gradient(center,ellipse farthest-corner,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);\\n  background: -ms-radial-gradient(center,ellipse farthest-corner,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);\\n  background: radial-gradient(center,ellipse farthest-corner,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);\\n  filter: \\\"progid:DXImageTransform.Microsoft.gradient(startColorstr='#66000000',endColorstr='#e6000000',GradientType=1)\\\";\\n  -ms-filter: \\\"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)\\\";\\n  filter: alpha(opacity=50);\\n  -webkit-transition: all 0.3s ease-out;\\n     -moz-transition: all 0.3s ease-out;\\n      -ms-transition: all 0.3s ease-out;\\n       -o-transition: all 0.3s ease-out;\\n          transition: all 0.3s ease-out;\\n}\\n\\n.introjs-fixParent {\\n  z-index: auto !important;\\n  opacity: 1.0 !important;\\n  -webkit-transform: none !important;\\n     -moz-transform: none !important;\\n      -ms-transform: none !important;\\n       -o-transform: none !important;\\n          transform: none !important;\\n}\\n\\n.introjs-showElement,\\ntr.introjs-showElement > td,\\ntr.introjs-showElement > th {\\n  z-index: 9999999 !important;\\n}\\n\\n.introjs-disableInteraction {\\n  z-index: 99999999 !important;\\n  position: absolute;\\n  background-color: white;\\n  opacity: 0;\\n  filter: alpha(opacity=0);\\n}\\n\\n.introjs-relativePosition,\\ntr.introjs-showElement > td,\\ntr.introjs-showElement > th {\\n  position: relative;\\n}\\n\\n.introjs-helperLayer {\\n  box-sizing: content-box;\\n  position: absolute;\\n  z-index: 9999998;\\n  background-color: #FFF;\\n  background-color: rgba(255,255,255,.9);\\n  border: 1px solid #777;\\n  border: 1px solid rgba(0,0,0,.5);\\n  border-radius: 4px;\\n  box-shadow: 0 2px 15px rgba(0,0,0,.4);\\n  -webkit-transition: all 0.3s ease-out;\\n     -moz-transition: all 0.3s ease-out;\\n      -ms-transition: all 0.3s ease-out;\\n       -o-transition: all 0.3s ease-out;\\n          transition: all 0.3s ease-out;\\n}\\n\\n.introjs-tooltipReferenceLayer {\\n  box-sizing: content-box;\\n  position: absolute;\\n  visibility: hidden;\\n  z-index: 100000000;\\n  background-color: transparent;\\n  -webkit-transition: all 0.3s ease-out;\\n     -moz-transition: all 0.3s ease-out;\\n      -ms-transition: all 0.3s ease-out;\\n       -o-transition: all 0.3s ease-out;\\n          transition: all 0.3s ease-out;\\n}\\n\\n.introjs-helperLayer *,\\n.introjs-helperLayer *:before,\\n.introjs-helperLayer *:after {\\n  -webkit-box-sizing: content-box;\\n     -moz-box-sizing: content-box;\\n      -ms-box-sizing: content-box;\\n       -o-box-sizing: content-box;\\n          box-sizing: content-box;\\n}\\n\\n.introjs-helperNumberLayer {\\n  box-sizing: content-box;\\n  position: absolute;\\n  visibility: visible;\\n  top: -16px;\\n  left: -16px;\\n  z-index: 9999999999 !important;\\n  padding: 2px;\\n  font-family: Arial, verdana, tahoma;\\n  font-size: 13px;\\n  font-weight: bold;\\n  color: white;\\n  text-align: center;\\n  text-shadow: 1px 1px 1px rgba(0,0,0,.3);\\n  background: #ff3019; /* Old browsers */\\n  background: -webkit-linear-gradient(top, #ff3019 0%, #cf0404 100%); /* Chrome10+,Safari5.1+ */\\n  background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #ff3019), color-stop(100%, #cf0404)); /* Chrome,Safari4+ */\\n  background:    -moz-linear-gradient(top, #ff3019 0%, #cf0404 100%); /* FF3.6+ */\\n  background:     -ms-linear-gradient(top, #ff3019 0%, #cf0404 100%); /* IE10+ */\\n  background:      -o-linear-gradient(top, #ff3019 0%, #cf0404 100%); /* Opera 11.10+ */\\n  background:         linear-gradient(to bottom, #ff3019 0%, #cf0404 100%);  /* W3C */\\n  width: 20px;\\n  height:20px;\\n  line-height: 20px;\\n  border: 3px solid white;\\n  border-radius: 50%;\\n  filter: \\\"progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff3019', endColorstr='#cf0404', GradientType=0)\\\"; /* IE6-9 */\\n  filter: \\\"progid:DXImageTransform.Microsoft.Shadow(direction=135, strength=2, color=ff0000)\\\"; /* IE10 text shadows */\\n  box-shadow: 0 2px 5px rgba(0,0,0,.4);\\n}\\n\\n.introjs-arrow {\\n  border: 5px solid transparent;\\n  content:'';\\n  position: absolute;\\n}\\n.introjs-arrow.top {\\n  top: -10px;\\n  border-bottom-color:white;\\n}\\n.introjs-arrow.top-right {\\n  top: -10px;\\n  right: 10px;\\n  border-bottom-color:white;\\n}\\n.introjs-arrow.top-middle {\\n  top: -10px;\\n  left: 50%;\\n  margin-left: -5px;\\n  border-bottom-color:white;\\n}\\n.introjs-arrow.right {\\n  right: -10px;\\n  top: 10px;\\n  border-left-color:white;\\n}\\n.introjs-arrow.right-bottom {\\n  bottom:10px;\\n  right: -10px;\\n  border-left-color:white;\\n}\\n.introjs-arrow.bottom {\\n  bottom: -10px;\\n  border-top-color:white;\\n}\\n.introjs-arrow.bottom-right {\\n  bottom: -10px;\\n  right: 10px;\\n  border-top-color:white;\\n}\\n.introjs-arrow.bottom-middle {\\n  bottom: -10px;\\n  left: 50%;\\n  margin-left: -5px;\\n  border-top-color:white;\\n}\\n.introjs-arrow.left {\\n  left: -10px;\\n  top: 10px;\\n  border-right-color:white;\\n}\\n.introjs-arrow.left-bottom {\\n  left: -10px;\\n  bottom:10px;\\n  border-right-color:white;\\n}\\n\\n.introjs-tooltip {\\n  box-sizing: content-box;\\n  position: absolute;\\n  visibility: visible;\\n  padding: 10px;\\n  background-color: white;\\n  min-width: 200px;\\n  max-width: 300px;\\n  border-radius: 3px;\\n  box-shadow: 0 1px 10px rgba(0,0,0,.4);\\n  -webkit-transition: opacity 0.1s ease-out;\\n     -moz-transition: opacity 0.1s ease-out;\\n      -ms-transition: opacity 0.1s ease-out;\\n       -o-transition: opacity 0.1s ease-out;\\n          transition: opacity 0.1s ease-out;\\n}\\n\\n.introjs-tooltipbuttons {\\n  text-align: right;\\n  white-space: nowrap;\\n}\\n\\n/*\\n Buttons style by http://nicolasgallagher.com/lab/css3-github-buttons/\\n Changed by Afshin Mehrabani\\n*/\\n.introjs-button {\\n  box-sizing: content-box;\\n  position: relative;\\n  overflow: visible;\\n  display: inline-block;\\n  padding: 0.3em 0.8em;\\n  border: 1px solid #d4d4d4;\\n  margin: 0;\\n  text-decoration: none;\\n  text-shadow: 1px 1px 0 #fff;\\n  font: 11px/normal sans-serif;\\n  color: #333;\\n  white-space: nowrap;\\n  cursor: pointer;\\n  outline: none;\\n  background-color: #ececec;\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#f4f4f4), to(#ececec));\\n  background-image: -moz-linear-gradient(#f4f4f4, #ececec);\\n  background-image: -o-linear-gradient(#f4f4f4, #ececec);\\n  background-image: linear-gradient(#f4f4f4, #ececec);\\n  -webkit-background-clip: padding;\\n  -moz-background-clip: padding;\\n  -o-background-clip: padding-box;\\n  /*background-clip: padding-box;*/ /* commented out due to Opera 11.10 bug */\\n  -webkit-border-radius: 0.2em;\\n  -moz-border-radius: 0.2em;\\n  border-radius: 0.2em;\\n  /* IE hacks */\\n  zoom: 1;\\n  *display: inline;\\n  margin-top: 10px;\\n}\\n\\n.introjs-button:hover {\\n  border-color: #bcbcbc;\\n  text-decoration: none;\\n  box-shadow: 0px 1px 1px #e3e3e3;\\n}\\n\\n.introjs-button:focus,\\n.introjs-button:active {\\n  background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#ececec), to(#f4f4f4));\\n  background-image: -moz-linear-gradient(#ececec, #f4f4f4);\\n  background-image: -o-linear-gradient(#ececec, #f4f4f4);\\n  background-image: linear-gradient(#ececec, #f4f4f4);\\n}\\n\\n/* overrides extra padding on button elements in Firefox */\\n.introjs-button::-moz-focus-inner {\\n  padding: 0;\\n  border: 0;\\n}\\n\\n.introjs-skipbutton {\\n  box-sizing: content-box;\\n  margin-right: 5px;\\n  color: #7a7a7a;\\n}\\n\\n.introjs-prevbutton {\\n  -webkit-border-radius: 0.2em 0 0 0.2em;\\n  -moz-border-radius: 0.2em 0 0 0.2em;\\n  border-radius: 0.2em 0 0 0.2em;\\n  border-right: none;\\n}\\n\\n.introjs-prevbutton.introjs-fullbutton {\\n  border: 1px solid #d4d4d4;\\n  -webkit-border-radius: 0.2em;\\n  -moz-border-radius: 0.2em;\\n  border-radius: 0.2em;\\n}\\n\\n.introjs-nextbutton {\\n  -webkit-border-radius: 0 0.2em 0.2em 0;\\n  -moz-border-radius: 0 0.2em 0.2em 0;\\n  border-radius: 0 0.2em 0.2em 0;\\n}\\n\\n.introjs-nextbutton.introjs-fullbutton {\\n  -webkit-border-radius: 0.2em;\\n  -moz-border-radius: 0.2em;\\n  border-radius: 0.2em;\\n}\\n\\n.introjs-disabled, .introjs-disabled:hover, .introjs-disabled:focus {\\n  color: #9a9a9a;\\n  border-color: #d4d4d4;\\n  box-shadow: none;\\n  cursor: default;\\n  background-color: #f4f4f4;\\n  background-image: none;\\n  text-decoration: none;\\n}\\n\\n.introjs-hidden {\\n     display: none;\\n}\\n\\n.introjs-bullets {\\n  text-align: center;\\n}\\n.introjs-bullets ul {\\n  box-sizing: content-box;\\n  clear: both;\\n  margin: 15px auto 0;\\n  padding: 0;\\n  display: inline-block;\\n}\\n.introjs-bullets ul li {\\n  box-sizing: content-box;\\n  list-style: none;\\n  float: left;\\n  margin: 0 2px;\\n}\\n.introjs-bullets ul li a {\\n  box-sizing: content-box;\\n  display: block;\\n  width: 6px;\\n  height: 6px;\\n  background: #ccc;\\n  border-radius: 10px;\\n  -moz-border-radius: 10px;\\n  -webkit-border-radius: 10px;\\n  text-decoration: none;\\n  cursor: pointer;\\n}\\n.introjs-bullets ul li a:hover {\\n  background: #999;\\n}\\n.introjs-bullets ul li a.active {\\n  background: #999;\\n}\\n\\n.introjs-progress {\\n  box-sizing: content-box;\\n  overflow: hidden;\\n  height: 10px;\\n  margin: 10px 0 5px 0;\\n  border-radius: 4px;\\n  background-color: #ecf0f1\\n}\\n.introjs-progressbar {\\n  box-sizing: content-box;\\n  float: left;\\n  width: 0%;\\n  height: 100%;\\n  font-size: 10px;\\n  line-height: 10px;\\n  text-align: center;\\n  background-color: #08c;\\n}\\n\\n.introjsFloatingElement {\\n  position: absolute;\\n  height: 0;\\n  width: 0;\\n  left: 50%;\\n  top: 50%;\\n}\\n\\n.introjs-fixedTooltip {\\n  position: fixed;\\n}\\n\\n.introjs-hint {\\n  box-sizing: content-box;\\n  position: absolute;\\n  background: transparent;\\n  width: 20px;\\n  height: 15px;\\n  cursor: pointer;\\n}\\n.introjs-hint:focus {\\n    border: 0;\\n    outline: 0;\\n}\\n.introjs-hidehint {\\n  display: none;\\n}\\n\\n.introjs-fixedhint {\\n  position: fixed;\\n}\\n\\n.introjs-hint:hover > .introjs-hint-pulse {\\n  border: 5px solid rgba(60, 60, 60, 0.57);\\n}\\n\\n.introjs-hint-pulse {\\n  box-sizing: content-box;\\n  width: 10px;\\n  height: 10px;\\n  border: 5px solid rgba(60, 60, 60, 0.27);\\n  -webkit-border-radius: 30px;\\n  -moz-border-radius: 30px;\\n  border-radius: 30px;\\n  background-color: rgba(136, 136, 136, 0.24);\\n  z-index: 10;\\n  position: absolute;\\n  -webkit-transition: all 0.2s ease-out;\\n     -moz-transition: all 0.2s ease-out;\\n      -ms-transition: all 0.2s ease-out;\\n       -o-transition: all 0.2s ease-out;\\n          transition: all 0.2s ease-out;\\n}\\n.introjs-hint-no-anim .introjs-hint-dot {\\n  -webkit-animation: none;\\n  -moz-animation: none;\\n  animation: none;\\n}\\n.introjs-hint-dot {\\n  box-sizing: content-box;\\n  border: 10px solid rgba(146, 146, 146, 0.36);\\n  background: transparent;\\n  -webkit-border-radius: 60px;\\n  -moz-border-radius: 60px;\\n  border-radius: 60px;\\n  height: 50px;\\n  width: 50px;\\n  -webkit-animation: introjspulse 3s ease-out;\\n  -moz-animation: introjspulse 3s ease-out;\\n  animation: introjspulse 3s ease-out;\\n  -webkit-animation-iteration-count: infinite;\\n  -moz-animation-iteration-count: infinite;\\n  animation-iteration-count: infinite;\\n  position: absolute;\\n  top: -25px;\\n  left: -25px;\\n  z-index: 1;\\n  opacity: 0;\\n}\\n\\n@-webkit-keyframes introjspulse {\\n    0% {\\n        -webkit-transform: scale(0);\\n        opacity: 0.0;\\n    }\\n    25% {\\n        -webkit-transform: scale(0);\\n        opacity: 0.1;\\n    }\\n    50% {\\n        -webkit-transform: scale(0.1);\\n        opacity: 0.3;\\n    }\\n    75% {\\n        -webkit-transform: scale(0.5);\\n        opacity: 0.5;\\n    }\\n    100% {\\n        -webkit-transform: scale(1);\\n        opacity: 0.0;\\n    }\\n}\\n\\n@-moz-keyframes introjspulse {\\n    0% {\\n        -moz-transform: scale(0);\\n        opacity: 0.0;\\n    }\\n    25% {\\n        -moz-transform: scale(0);\\n        opacity: 0.1;\\n    }\\n    50% {\\n        -moz-transform: scale(0.1);\\n        opacity: 0.3;\\n    }\\n    75% {\\n        -moz-transform: scale(0.5);\\n        opacity: 0.5;\\n    }\\n    100% {\\n        -moz-transform: scale(1);\\n        opacity: 0.0;\\n    }\\n}\\n\\n@keyframes introjspulse {\\n    0% {\\n        transform: scale(0);\\n        opacity: 0.0;\\n    }\\n    25% {\\n        transform: scale(0);\\n        opacity: 0.1;\\n    }\\n    50% {\\n        transform: scale(0.1);\\n        opacity: 0.3;\\n    }\\n    75% {\\n        transform: scale(0.5);\\n        opacity: 0.5;\\n    }\\n    100% {\\n        transform: scale(1);\\n        opacity: 0.0;\\n    }\\n}\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./assets/introjs.css\n");

/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MjM1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/lib/css-base.js\n");

/***/ }),

/***/ "./node_modules/intro.js-react/lib/components/Hints/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/intro.js-react/lib/components/Hints/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _intro = __webpack_require__(/*! intro.js */ \"./node_modules/intro.js/intro.js\");\n\nvar _intro2 = _interopRequireDefault(_intro);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _proptypes = __webpack_require__(/*! ../../helpers/proptypes */ \"./node_modules/intro.js-react/lib/helpers/proptypes.js\");\n\nvar introJsPropTypes = _interopRequireWildcard(_proptypes);\n\nvar _defaultProps = __webpack_require__(/*! ../../helpers/defaultProps */ \"./node_modules/intro.js-react/lib/helpers/defaultProps.js\");\n\nvar introJsDefaultProps = _interopRequireWildcard(_defaultProps);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Intro.js Hints Component.\n */\nvar Hints = function (_Component) {\n  _inherits(Hints, _Component);\n\n  /**\n   * Creates a new instance of the component.\n   * @class\n   * @param {Object} props - The props of the component.\n   */\n\n  /**\n   * React Props\n   * @type {Object}\n   */\n  function Hints(props) {\n    _classCallCheck(this, Hints);\n\n    var _this = _possibleConstructorReturn(this, (Hints.__proto__ || Object.getPrototypeOf(Hints)).call(this, props));\n\n    _this.introJs = null;\n    _this.isConfigured = false;\n\n    _this.installIntroJs();\n    return _this;\n  }\n\n  /**\n   * Lifecycle: componentDidMount.\n   * We use this event to enable Intro.js hints at mount time if enabled right from the start.\n   */\n\n\n  /**\n   * React Default Props\n   * @type {Object}\n   */\n\n\n  _createClass(Hints, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.enabled) {\n        this.configureIntroJs();\n        this.renderHints();\n      }\n    }\n\n    /**\n     * Lifecycle: componentDidUpdate.\n     * @param  {Object} prevProps - The previous props.\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          enabled = _props.enabled,\n          hints = _props.hints,\n          options = _props.options;\n\n\n      if (!this.isConfigured || prevProps.hints !== hints || prevProps.options !== options) {\n        this.configureIntroJs();\n        this.renderHints();\n      }\n\n      if (prevProps.enabled !== enabled) {\n        this.renderHints();\n      }\n    }\n\n    /**\n     * Lifecycle: componentWillUnmount.\n     * We use this even to hide the hints when the component is unmounted.\n     */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.introJs.hideHints();\n    }\n\n    /**\n     * Installs Intro.js.\n     */\n\n  }, {\n    key: 'installIntroJs',\n    value: function installIntroJs() {\n      this.introJs = (0, _intro2.default)();\n\n      var _props2 = this.props,\n          onClick = _props2.onClick,\n          onClose = _props2.onClose;\n\n\n      if (onClick) {\n        this.introJs.onhintclick(onClick);\n      }\n\n      if (onClose) {\n        this.introJs.onhintclose(onClose);\n      }\n    }\n\n    /**\n     * Configures Intro.js if not already configured.\n     */\n\n  }, {\n    key: 'configureIntroJs',\n    value: function configureIntroJs() {\n      var _props3 = this.props,\n          options = _props3.options,\n          hints = _props3.hints;\n\n      // We need to remove all hints otherwise new hints won't be added.\n\n      this.introJs.removeHints();\n\n      this.introJs.setOptions(_extends({}, options, { hints: hints }));\n\n      this.isConfigured = true;\n    }\n\n    /**\n     * Renders the Intro.js hints.\n     */\n\n  }, {\n    key: 'renderHints',\n    value: function renderHints() {\n      var _props4 = this.props,\n          enabled = _props4.enabled,\n          hints = _props4.hints;\n\n\n      if (enabled && hints.length > 0) {\n        this.introJs.showHints();\n      } else if (!enabled) {\n        this.introJs.hideHints();\n      }\n    }\n\n    /**\n     * Renders the component.\n     * @return {null} We do not want to render anything.\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return Hints;\n}(_react.Component);\n\nHints.propTypes = {\n  enabled: _propTypes2.default.bool,\n  hints: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    element: _propTypes2.default.string.isRequired,\n    hint: _propTypes2.default.string.isRequired,\n    hintPosition: introJsPropTypes.hintPosition\n  })).isRequired,\n  onClick: _propTypes2.default.func,\n  onClose: _propTypes2.default.func,\n  options: introJsPropTypes.options\n};\nHints.defaultProps = {\n  enabled: false,\n  onClick: null,\n  onClose: null,\n  options: introJsDefaultProps.options\n};\nexports.default = Hints;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/intro.js-react/lib/components/Hints/index.js\n");

/***/ }),

/***/ "./node_modules/intro.js-react/lib/components/Steps/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/intro.js-react/lib/components/Steps/index.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _intro = __webpack_require__(/*! intro.js */ \"./node_modules/intro.js/intro.js\");\n\nvar _intro2 = _interopRequireDefault(_intro);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _proptypes = __webpack_require__(/*! ../../helpers/proptypes */ \"./node_modules/intro.js-react/lib/helpers/proptypes.js\");\n\nvar introJsPropTypes = _interopRequireWildcard(_proptypes);\n\nvar _defaultProps = __webpack_require__(/*! ../../helpers/defaultProps */ \"./node_modules/intro.js-react/lib/helpers/defaultProps.js\");\n\nvar introJsDefaultProps = _interopRequireWildcard(_defaultProps);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * Intro.js Steps Component.\n */\nvar Steps = function (_Component) {\n  _inherits(Steps, _Component);\n\n  /**\n   * Creates a new instance of the component.\n   * @class\n   * @param {Object} props - The props of the component.\n   */\n\n  /**\n   * React Props\n   * @type {Object}\n   */\n  function Steps(props) {\n    _classCallCheck(this, Steps);\n\n    var _this = _possibleConstructorReturn(this, (Steps.__proto__ || Object.getPrototypeOf(Steps)).call(this, props));\n\n    _this.onExit = function () {\n      var onExit = _this.props.onExit;\n\n\n      _this.isVisible = false;\n\n      onExit(_this.introJs._currentStep);\n    };\n\n    _this.onBeforeExit = function () {\n      var onBeforeExit = _this.props.onBeforeExit;\n\n\n      if (onBeforeExit) {\n        return onBeforeExit(_this.introJs._currentStep);\n      }\n\n      return true;\n    };\n\n    _this.onBeforeChange = function () {\n      if (!_this.isVisible) {\n        return true;\n      }\n\n      var _this$props = _this.props,\n          onBeforeChange = _this$props.onBeforeChange,\n          onPreventChange = _this$props.onPreventChange;\n\n\n      if (onBeforeChange) {\n        var continueStep = onBeforeChange(_this.introJs._currentStep);\n\n        if (continueStep === false && onPreventChange) {\n          setTimeout(function () {\n            onPreventChange(_this.introJs._currentStep);\n          }, 0);\n        }\n\n        return continueStep;\n      }\n\n      return true;\n    };\n\n    _this.onAfterChange = function (element) {\n      if (!_this.isVisible) {\n        return;\n      }\n\n      var onAfterChange = _this.props.onAfterChange;\n\n\n      if (onAfterChange) {\n        onAfterChange(_this.introJs._currentStep, element);\n      }\n    };\n\n    _this.onChange = function (element) {\n      if (!_this.isVisible) {\n        return;\n      }\n\n      var onChange = _this.props.onChange;\n\n\n      if (onChange) {\n        onChange(_this.introJs._currentStep, element);\n      }\n    };\n\n    _this.onComplete = function () {\n      var onComplete = _this.props.onComplete;\n\n\n      if (onComplete) {\n        onComplete();\n      }\n    };\n\n    _this.updateStepElement = function (stepIndex) {\n      var element = document.querySelector(_this.introJs._options.steps[stepIndex].element);\n\n      if (element) {\n        _this.introJs._introItems[stepIndex].element = element;\n        _this.introJs._introItems[stepIndex].position = _this.introJs._options.steps[stepIndex].position || 'auto';\n      }\n    };\n\n    _this.introJs = null;\n    _this.isConfigured = false;\n    // We need to manually keep track of the visibility state to avoid a callback hell.\n    _this.isVisible = false;\n\n    _this.installIntroJs();\n    return _this;\n  }\n\n  /**\n   * Lifecycle: componentDidMount.\n   * We use this event to enable Intro.js steps at mount time if enabled right from the start.\n   */\n\n\n  /**\n   * React Default Props\n   * @type {Object}\n   */\n\n\n  _createClass(Steps, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.enabled) {\n        this.configureIntroJs();\n        this.renderSteps();\n      }\n    }\n\n    /**\n     * Lifecycle: componentDidUpdate.\n     * @param  {Object} prevProps - The previous props.\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      var _props = this.props,\n          enabled = _props.enabled,\n          steps = _props.steps,\n          options = _props.options;\n\n\n      if (!this.isConfigured || prevProps.steps !== steps || prevProps.options !== options) {\n        this.configureIntroJs();\n        this.renderSteps();\n      }\n\n      if (prevProps.enabled !== enabled) {\n        this.renderSteps();\n      }\n    }\n\n    /**\n     * Lifecycle: componentWillUnmount.\n     * We use this even to hide the steps when the component is unmounted.\n     */\n\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.introJs.exit();\n    }\n\n    /**\n     * Triggered when Intro.js steps are exited.\n     */\n\n\n    /**\n     * Triggered before exiting the intro.\n     * @return {Boolean} Returning `false` will prevent exiting the intro.\n     */\n\n\n    /**\n     * Triggered before changing step.\n     * @return {Boolean} Returning `false` will prevent the step transition.\n     */\n\n\n    /**\n     * Triggered after changing step.\n     * @param  {HTMLElement} element - The element associated to the new step.\n     */\n\n\n    /**\n     * Triggered when changing step.\n     * @param  {HTMLElement} element - The element associated to the next step.\n     */\n\n\n    /**\n     * Triggered when completing all the steps.\n     */\n\n\n    /**\n     * Updates the element associated to a step based on its index.\n     * This is useful when the associated element is not present in the DOM on page load.\n     * @param  {number} stepIndex - The index of the step to update.\n     */\n\n  }, {\n    key: 'installIntroJs',\n\n\n    /**\n     * Installs Intro.js.\n     */\n    value: function installIntroJs() {\n      this.introJs = (0, _intro2.default)();\n\n      this.introJs.onexit(this.onExit);\n      this.introJs.onbeforeexit(this.onBeforeExit);\n      this.introJs.onbeforechange(this.onBeforeChange);\n      this.introJs.onafterchange(this.onAfterChange);\n      this.introJs.onchange(this.onChange);\n      this.introJs.oncomplete(this.onComplete);\n    }\n\n    /**\n     * Configures Intro.js if not already configured.\n     */\n\n  }, {\n    key: 'configureIntroJs',\n    value: function configureIntroJs() {\n      var _props2 = this.props,\n          options = _props2.options,\n          steps = _props2.steps;\n\n\n      this.introJs.setOptions(_extends({}, options, { steps: steps }));\n\n      this.isConfigured = true;\n    }\n\n    /**\n     * Renders the Intro.js steps.\n     */\n\n  }, {\n    key: 'renderSteps',\n    value: function renderSteps() {\n      var _props3 = this.props,\n          enabled = _props3.enabled,\n          initialStep = _props3.initialStep,\n          steps = _props3.steps,\n          onStart = _props3.onStart;\n\n\n      if (enabled && steps.length > 0 && !this.isVisible) {\n        this.introJs.start();\n\n        this.isVisible = true;\n\n        this.introJs.goToStepNumber(initialStep + 1);\n\n        if (onStart) {\n          onStart(this.introJs._currentStep);\n        }\n      } else if (!enabled && this.isVisible) {\n        this.isVisible = false;\n\n        this.introJs.exit();\n      }\n    }\n\n    /**\n     * Renders the component.\n     * @return {null} We do not want to render anything.\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return Steps;\n}(_react.Component);\n\nSteps.propTypes = {\n  enabled: _propTypes2.default.bool,\n  initialStep: _propTypes2.default.number.isRequired,\n  steps: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n    element: _propTypes2.default.string,\n    intro: _propTypes2.default.string.isRequired,\n    position: introJsPropTypes.tooltipPosition,\n    tooltipClass: _propTypes2.default.string,\n    highlightClass: _propTypes2.default.string\n  })).isRequired,\n  onStart: _propTypes2.default.func,\n  onExit: _propTypes2.default.func.isRequired,\n  onBeforeExit: _propTypes2.default.func,\n  onBeforeChange: _propTypes2.default.func,\n  onAfterChange: _propTypes2.default.func,\n  onChange: _propTypes2.default.func,\n  onPreventChange: _propTypes2.default.func,\n  onComplete: _propTypes2.default.func,\n  options: introJsPropTypes.options\n};\nSteps.defaultProps = {\n  enabled: false,\n  onStart: null,\n  onBeforeExit: null,\n  onBeforeChange: null,\n  onAfterChange: null,\n  onChange: null,\n  onPreventChange: null,\n  onComplete: null,\n  options: introJsDefaultProps.options\n};\nexports.default = Steps;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/intro.js-react/lib/components/Steps/index.js\n");

/***/ }),

/***/ "./node_modules/intro.js-react/lib/helpers/defaultProps.js":
/*!*****************************************************************!*\
  !*** ./node_modules/intro.js-react/lib/helpers/defaultProps.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Intro.js options default proptypes.\n * @type {Object}\n */\nvar options = exports.options = {\n  hidePrev: true,\n  hideNext: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvaW50cm8uanMtcmVhY3QvbGliL2hlbHBlcnMvZGVmYXVsdFByb3BzLmpzPzI1ZmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW50cm8uanMtcmVhY3QvbGliL2hlbHBlcnMvZGVmYXVsdFByb3BzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIEludHJvLmpzIG9wdGlvbnMgZGVmYXVsdCBwcm9wdHlwZXMuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG52YXIgb3B0aW9ucyA9IGV4cG9ydHMub3B0aW9ucyA9IHtcbiAgaGlkZVByZXY6IHRydWUsXG4gIGhpZGVOZXh0OiB0cnVlXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/intro.js-react/lib/helpers/defaultProps.js\n");

/***/ }),

/***/ "./node_modules/intro.js-react/lib/helpers/proptypes.js":
/*!**************************************************************!*\
  !*** ./node_modules/intro.js-react/lib/helpers/proptypes.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.options = exports.hintPosition = exports.tooltipPosition = undefined;\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Intro.js tooltip position proptype.\n * @type {Function}\n */\nvar tooltipPosition = exports.tooltipPosition = _propTypes2.default.oneOf(['top', 'right', 'bottom', 'left', 'bottom-left-aligned', 'bottom-middle-aligned', 'bottom-right-aligned', 'auto']);\n\n/**\n * Intro.js hint position proptype.\n * @type {Function}\n */\nvar hintPosition = exports.hintPosition = _propTypes2.default.oneOf(['top-middle', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'bottom-middle', 'middle-left', 'middle-right', 'middle-middle']);\n\nvar options = exports.options = _propTypes2.default.shape({\n  nextLabel: _propTypes2.default.string,\n  prevLabel: _propTypes2.default.string,\n  skipLabel: _propTypes2.default.string,\n  doneLabel: _propTypes2.default.string,\n  hidePrev: _propTypes2.default.bool,\n  hideNext: _propTypes2.default.bool,\n  tooltipPosition: tooltipPosition,\n  tooltipClass: _propTypes2.default.string,\n  highlightClass: _propTypes2.default.string,\n  exitOnEsc: _propTypes2.default.bool,\n  exitOnOverlayClick: _propTypes2.default.bool,\n  showStepNumbers: _propTypes2.default.bool,\n  keyboardNavigation: _propTypes2.default.bool,\n  showButtons: _propTypes2.default.bool,\n  showBullets: _propTypes2.default.bool,\n  showProgress: _propTypes2.default.bool,\n  scrollToElement: _propTypes2.default.bool,\n  overlayOpacity: _propTypes2.default.number,\n  scrollPadding: _propTypes2.default.number,\n  positionPrecedence: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  disableInteraction: _propTypes2.default.bool,\n  hintPosition: hintPosition,\n  hintButtonLabel: _propTypes2.default.string,\n  hintAnimation: _propTypes2.default.bool\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvaW50cm8uanMtcmVhY3QvbGliL2hlbHBlcnMvcHJvcHR5cGVzLmpzPzVjYTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQSxpQkFBaUIsbUJBQU8sQ0FBQyxzREFBWTs7QUFFckM7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2ludHJvLmpzLXJlYWN0L2xpYi9oZWxwZXJzL3Byb3B0eXBlcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMub3B0aW9ucyA9IGV4cG9ydHMuaGludFBvc2l0aW9uID0gZXhwb3J0cy50b29sdGlwUG9zaXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEludHJvLmpzIHRvb2x0aXAgcG9zaXRpb24gcHJvcHR5cGUuXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cbnZhciB0b29sdGlwUG9zaXRpb24gPSBleHBvcnRzLnRvb2x0aXBQb3NpdGlvbiA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnLCAnYm90dG9tLWxlZnQtYWxpZ25lZCcsICdib3R0b20tbWlkZGxlLWFsaWduZWQnLCAnYm90dG9tLXJpZ2h0LWFsaWduZWQnLCAnYXV0byddKTtcblxuLyoqXG4gKiBJbnRyby5qcyBoaW50IHBvc2l0aW9uIHByb3B0eXBlLlxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG52YXIgaGludFBvc2l0aW9uID0gZXhwb3J0cy5oaW50UG9zaXRpb24gPSBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsndG9wLW1pZGRsZScsICd0b3AtbGVmdCcsICd0b3AtcmlnaHQnLCAnYm90dG9tLWxlZnQnLCAnYm90dG9tLXJpZ2h0JywgJ2JvdHRvbS1taWRkbGUnLCAnbWlkZGxlLWxlZnQnLCAnbWlkZGxlLXJpZ2h0JywgJ21pZGRsZS1taWRkbGUnXSk7XG5cbnZhciBvcHRpb25zID0gZXhwb3J0cy5vcHRpb25zID0gX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7XG4gIG5leHRMYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHByZXZMYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIHNraXBMYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGRvbmVMYWJlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGhpZGVQcmV2OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGhpZGVOZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHRvb2x0aXBQb3NpdGlvbjogdG9vbHRpcFBvc2l0aW9uLFxuICB0b29sdGlwQ2xhc3M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBoaWdobGlnaHRDbGFzczogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIGV4aXRPbkVzYzogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBleGl0T25PdmVybGF5Q2xpY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2hvd1N0ZXBOdW1iZXJzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGtleWJvYXJkTmF2aWdhdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG93QnV0dG9uczogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG93QnVsbGV0czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICBzaG93UHJvZ3Jlc3M6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgc2Nyb2xsVG9FbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIG92ZXJsYXlPcGFjaXR5OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlcixcbiAgc2Nyb2xsUGFkZGluZzogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIHBvc2l0aW9uUHJlY2VkZW5jZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nKSxcbiAgZGlzYWJsZUludGVyYWN0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIGhpbnRQb3NpdGlvbjogaGludFBvc2l0aW9uLFxuICBoaW50QnV0dG9uTGFiZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBoaW50QW5pbWF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xcbn0pOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/intro.js-react/lib/helpers/proptypes.js\n");

/***/ }),

/***/ "./node_modules/intro.js-react/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/intro.js-react/lib/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Steps = __webpack_require__(/*! ./components/Steps */ \"./node_modules/intro.js-react/lib/components/Steps/index.js\");\n\nObject.defineProperty(exports, 'Steps', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Steps).default;\n  }\n});\n\nvar _Hints = __webpack_require__(/*! ./components/Hints */ \"./node_modules/intro.js-react/lib/components/Hints/index.js\");\n\nObject.defineProperty(exports, 'Hints', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_Hints).default;\n  }\n});\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvaW50cm8uanMtcmVhY3QvbGliL2luZGV4LmpzPzdhMjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7O0FBRUQsYUFBYSxtQkFBTyxDQUFDLHVGQUFvQjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsYUFBYSxtQkFBTyxDQUFDLHVGQUFvQjs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsc0NBQXNDLHVDQUF1QyxnQkFBZ0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW50cm8uanMtcmVhY3QvbGliL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1N0ZXBzID0gcmVxdWlyZSgnLi9jb21wb25lbnRzL1N0ZXBzJyk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnU3RlcHMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdGVwcykuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSGludHMgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvSGludHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdIaW50cycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0hpbnRzKS5kZWZhdWx0O1xuICB9XG59KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/intro.js-react/lib/index.js\n");

/***/ }),

/***/ "./node_modules/intro.js/intro.js":
/*!****************************************!*\
  !*** ./node_modules/intro.js/intro.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Intro.js v2.9.3\n * https://github.com/usablica/intro.js\n *\n * Copyright (C) 2017 Afshin Mehrabani (@afshinmeh)\n */\n\n(function(f) {\n    if (true) {\n        module.exports = f();\n        // deprecated function\n        // @since 2.8.0\n        module.exports.introJs = function () {\n          console.warn('Deprecated: please use require(\"intro.js\") directly, instead of the introJs method of the function');\n          // introJs()\n          return f().apply(this, arguments);\n        };\n    } else { var g; }\n})(function () {\n  //Default config/variables\n  var VERSION = '2.9.3';\n\n  /**\n   * IntroJs main class\n   *\n   * @class IntroJs\n   */\n  function IntroJs(obj) {\n    this._targetElement = obj;\n    this._introItems = [];\n\n    this._options = {\n      /* Next button label in tooltip box */\n      nextLabel: 'Next &rarr;',\n      /* Previous button label in tooltip box */\n      prevLabel: '&larr; Back',\n      /* Skip button label in tooltip box */\n      skipLabel: 'Skip',\n      /* Done button label in tooltip box */\n      doneLabel: 'Done',\n      /* Hide previous button in the first step? Otherwise, it will be disabled button. */\n      hidePrev: false,\n      /* Hide next button in the last step? Otherwise, it will be disabled button. */\n      hideNext: false,\n      /* Default tooltip box position */\n      tooltipPosition: 'bottom',\n      /* Next CSS class for tooltip boxes */\n      tooltipClass: '',\n      /* CSS class that is added to the helperLayer */\n      highlightClass: '',\n      /* Close introduction when pressing Escape button? */\n      exitOnEsc: true,\n      /* Close introduction when clicking on overlay layer? */\n      exitOnOverlayClick: true,\n      /* Show step numbers in introduction? */\n      showStepNumbers: true,\n      /* Let user use keyboard to navigate the tour? */\n      keyboardNavigation: true,\n      /* Show tour control buttons? */\n      showButtons: true,\n      /* Show tour bullets? */\n      showBullets: true,\n      /* Show tour progress? */\n      showProgress: false,\n      /* Scroll to highlighted element? */\n      scrollToElement: true,\n      /*\n       * Should we scroll the tooltip or target element?\n       *\n       * Options are: 'element' or 'tooltip'\n       */\n      scrollTo: 'element',\n      /* Padding to add after scrolling when element is not in the viewport (in pixels) */\n      scrollPadding: 30,\n      /* Set the overlay opacity */\n      overlayOpacity: 0.8,\n      /* Precedence of positions, when auto is enabled */\n      positionPrecedence: [\"bottom\", \"top\", \"right\", \"left\"],\n      /* Disable an interaction with element? */\n      disableInteraction: false,\n      /* Set how much padding to be used around helper element */\n      helperElementPadding: 10,\n      /* Default hint position */\n      hintPosition: 'top-middle',\n      /* Hint button label */\n      hintButtonLabel: 'Got it',\n      /* Adding animation to hints? */\n      hintAnimation: true,\n      /* additional classes to put on the buttons */\n      buttonClass: \"introjs-button\"\n    };\n  }\n\n  /**\n   * Initiate a new introduction/guide from an element in the page\n   *\n   * @api private\n   * @method _introForElement\n   * @param {Object} targetElm\n   * @param {String} group\n   * @returns {Boolean} Success or not?\n   */\n  function _introForElement(targetElm, group) {\n    var allIntroSteps = targetElm.querySelectorAll(\"*[data-intro]\"),\n        introItems = [];\n\n    if (this._options.steps) {\n      //use steps passed programmatically\n      _forEach(this._options.steps, function (step) {\n        var currentItem = _cloneObject(step);\n\n        //set the step\n        currentItem.step = introItems.length + 1;\n\n        //use querySelector function only when developer used CSS selector\n        if (typeof (currentItem.element) === 'string') {\n          //grab the element with given selector from the page\n          currentItem.element = document.querySelector(currentItem.element);\n        }\n\n        //intro without element\n        if (typeof (currentItem.element) === 'undefined' || currentItem.element === null) {\n          var floatingElementQuery = document.querySelector(\".introjsFloatingElement\");\n\n          if (floatingElementQuery === null) {\n            floatingElementQuery = document.createElement('div');\n            floatingElementQuery.className = 'introjsFloatingElement';\n\n            document.body.appendChild(floatingElementQuery);\n          }\n\n          currentItem.element  = floatingElementQuery;\n          currentItem.position = 'floating';\n        }\n\n        currentItem.scrollTo = currentItem.scrollTo || this._options.scrollTo;\n\n        if (typeof (currentItem.disableInteraction) === 'undefined') {\n          currentItem.disableInteraction = this._options.disableInteraction;\n        }\n\n        if (currentItem.element !== null) {\n          introItems.push(currentItem);\n        }        \n      }.bind(this));\n\n    } else {\n      //use steps from data-* annotations\n      var elmsLength = allIntroSteps.length;\n      var disableInteraction;\n      \n      //if there's no element to intro\n      if (elmsLength < 1) {\n        return false;\n      }\n\n      _forEach(allIntroSteps, function (currentElement) {\n        \n        // PR #80\n        // start intro for groups of elements\n        if (group && (currentElement.getAttribute(\"data-intro-group\") !== group)) {\n          return;\n        }\n\n        // skip hidden elements\n        if (currentElement.style.display === 'none') {\n          return;\n        }\n\n        var step = parseInt(currentElement.getAttribute('data-step'), 10);\n\n        if (typeof (currentElement.getAttribute('data-disable-interaction')) !== 'undefined') {\n          disableInteraction = !!currentElement.getAttribute('data-disable-interaction');\n        } else {\n          disableInteraction = this._options.disableInteraction;\n        }\n\n        if (step > 0) {\n          introItems[step - 1] = {\n            element: currentElement,\n            intro: currentElement.getAttribute('data-intro'),\n            step: parseInt(currentElement.getAttribute('data-step'), 10),\n            tooltipClass: currentElement.getAttribute('data-tooltipclass'),\n            highlightClass: currentElement.getAttribute('data-highlightclass'),\n            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition,\n            scrollTo: currentElement.getAttribute('data-scrollto') || this._options.scrollTo,\n            disableInteraction: disableInteraction\n          };\n        }\n      }.bind(this));\n\n      //next add intro items without data-step\n      //todo: we need a cleanup here, two loops are redundant\n      var nextStep = 0;\n\n      _forEach(allIntroSteps, function (currentElement) {\n        \n        // PR #80\n        // start intro for groups of elements\n        if (group && (currentElement.getAttribute(\"data-intro-group\") !== group)) {\n          return;\n        }\n        \n        if (currentElement.getAttribute('data-step') === null) {\n\n          while (true) {\n            if (typeof introItems[nextStep] === 'undefined') {\n              break;\n            } else {\n              nextStep++;\n            }\n          } \n\n          if (typeof (currentElement.getAttribute('data-disable-interaction')) !== 'undefined') {\n            disableInteraction = !!currentElement.getAttribute('data-disable-interaction');\n          } else {\n            disableInteraction = this._options.disableInteraction;\n          }\n\n          introItems[nextStep] = {\n            element: currentElement,\n            intro: currentElement.getAttribute('data-intro'),\n            step: nextStep + 1,\n            tooltipClass: currentElement.getAttribute('data-tooltipclass'),\n            highlightClass: currentElement.getAttribute('data-highlightclass'),\n            position: currentElement.getAttribute('data-position') || this._options.tooltipPosition,\n            scrollTo: currentElement.getAttribute('data-scrollto') || this._options.scrollTo,\n            disableInteraction: disableInteraction\n          };\n        }\n      }.bind(this));\n    }\n\n    //removing undefined/null elements\n    var tempIntroItems = [];\n    for (var z = 0; z < introItems.length; z++) {\n      if (introItems[z]) {\n        // copy non-falsy values to the end of the array\n        tempIntroItems.push(introItems[z]);  \n      } \n    }\n\n    introItems = tempIntroItems;\n\n    //Ok, sort all items with given steps\n    introItems.sort(function (a, b) {\n      return a.step - b.step;\n    });\n\n    //set it to the introJs object\n    this._introItems = introItems;\n\n    //add overlay layer to the page\n    if(_addOverlayLayer.call(this, targetElm)) {\n      //then, start the show\n      _nextStep.call(this);\n\n      if (this._options.keyboardNavigation) {\n        DOMEvent.on(window, 'keydown', _onKeyDown, this, true);\n      }\n      //for window resize\n      DOMEvent.on(window, 'resize', _onResize, this, true);\n    }\n    return false;\n  }\n\n  function _onResize () {\n    this.refresh.call(this);\n  }\n\n  /**\n  * on keyCode:\n  * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n  * This feature has been removed from the Web standards.\n  * Though some browsers may still support it, it is in\n  * the process of being dropped.\n  * Instead, you should use KeyboardEvent.code,\n  * if it's implemented.\n  *\n  * jQuery's approach is to test for\n  *   (1) e.which, then\n  *   (2) e.charCode, then\n  *   (3) e.keyCode\n  * https://github.com/jquery/jquery/blob/a6b0705294d336ae2f63f7276de0da1195495363/src/event.js#L638\n  *\n  * @param type var\n  * @return type\n  */\n  function _onKeyDown (e) {\n    var code = (e.code === null) ? e.which : e.code;\n\n    // if code/e.which is null\n    if (code === null) {\n      code = (e.charCode === null) ? e.keyCode : e.charCode;\n    }\n    \n    if ((code === 'Escape' || code === 27) && this._options.exitOnEsc === true) {\n      //escape key pressed, exit the intro\n      //check if exit callback is defined\n      _exitIntro.call(this, this._targetElement);\n    } else if (code === 'ArrowLeft' || code === 37) {\n      //left arrow\n      _previousStep.call(this);\n    } else if (code === 'ArrowRight' || code === 39) {\n      //right arrow\n      _nextStep.call(this);\n    } else if (code === 'Enter' || code === 13) {\n      //srcElement === ie\n      var target = e.target || e.srcElement;\n      if (target && target.className.match('introjs-prevbutton')) {\n        //user hit enter while focusing on previous button\n        _previousStep.call(this);\n      } else if (target && target.className.match('introjs-skipbutton')) {\n        //user hit enter while focusing on skip button\n        if (this._introItems.length - 1 === this._currentStep && typeof (this._introCompleteCallback) === 'function') {\n            this._introCompleteCallback.call(this);\n        }\n\n        _exitIntro.call(this, this._targetElement);\n      } else if (target && target.getAttribute('data-stepnumber')) {\n        // user hit enter while focusing on step bullet\n        target.click();\n      } else {\n        //default behavior for responding to enter\n        _nextStep.call(this);\n      }\n\n      //prevent default behaviour on hitting Enter, to prevent steps being skipped in some browsers\n      if(e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    }\n  }\n\n /*\n   * makes a copy of the object\n   * @api private\n   * @method _cloneObject\n  */\n  function _cloneObject(object) {\n      if (object === null || typeof (object) !== 'object' || typeof (object.nodeType) !== 'undefined') {\n        return object;\n      }\n      var temp = {};\n      for (var key in object) {\n        if (typeof(window.jQuery) !== 'undefined' && object[key] instanceof window.jQuery) {\n          temp[key] = object[key];\n        } else {\n          temp[key] = _cloneObject(object[key]);\n        }\n      }\n      return temp;\n  }\n  /**\n   * Go to specific step of introduction\n   *\n   * @api private\n   * @method _goToStep\n   */\n  function _goToStep(step) {\n    //because steps starts with zero\n    this._currentStep = step - 2;\n    if (typeof (this._introItems) !== 'undefined') {\n      _nextStep.call(this);\n    }\n  }\n\n  /**\n   * Go to the specific step of introduction with the explicit [data-step] number\n   *\n   * @api private\n   * @method _goToStepNumber\n   */\n  function _goToStepNumber(step) {\n    this._currentStepNumber = step;\n    if (typeof (this._introItems) !== 'undefined') {\n      _nextStep.call(this);\n    }\n  }\n\n  /**\n   * Go to next step on intro\n   *\n   * @api private\n   * @method _nextStep\n   */\n  function _nextStep() {\n    this._direction = 'forward';\n\n    if (typeof (this._currentStepNumber) !== 'undefined') {\n      _forEach(this._introItems, function (item, i) {\n        if( item.step === this._currentStepNumber ) {\n          this._currentStep = i - 1;\n          this._currentStepNumber = undefined;\n        }\n      }.bind(this));\n    }\n\n    if (typeof (this._currentStep) === 'undefined') {\n      this._currentStep = 0;\n    } else {\n      ++this._currentStep;\n    }\n\n    var nextStep = this._introItems[this._currentStep];\n    var continueStep = true;\n\n    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {\n      continueStep = this._introBeforeChangeCallback.call(this, nextStep.element);\n    }\n\n    // if `onbeforechange` returned `false`, stop displaying the element\n    if (continueStep === false) {\n      --this._currentStep;\n      return false;\n    }\n\n    if ((this._introItems.length) <= this._currentStep) {\n      //end of the intro\n      //check if any callback is defined\n      if (typeof (this._introCompleteCallback) === 'function') {\n        this._introCompleteCallback.call(this);\n      }\n      _exitIntro.call(this, this._targetElement);\n      return;\n    }\n\n    _showElement.call(this, nextStep);\n  }\n\n  /**\n   * Go to previous step on intro\n   *\n   * @api private\n   * @method _previousStep\n   */\n  function _previousStep() {\n    this._direction = 'backward';\n\n    if (this._currentStep === 0) {\n      return false;\n    }\n\n    --this._currentStep;\n\n    var nextStep = this._introItems[this._currentStep];\n    var continueStep = true;\n\n    if (typeof (this._introBeforeChangeCallback) !== 'undefined') {\n      continueStep = this._introBeforeChangeCallback.call(this, nextStep.element);\n    }\n\n    // if `onbeforechange` returned `false`, stop displaying the element\n    if (continueStep === false) {\n      ++this._currentStep;\n      return false;\n    }\n\n    _showElement.call(this, nextStep);\n  }\n\n  /**\n   * Update placement of the intro objects on the screen\n   * @api private\n   */\n  function _refresh() {\n    // re-align intros\n    _setHelperLayerPosition.call(this, document.querySelector('.introjs-helperLayer'));\n    _setHelperLayerPosition.call(this, document.querySelector('.introjs-tooltipReferenceLayer'));\n    _setHelperLayerPosition.call(this, document.querySelector('.introjs-disableInteraction'));\n\n    // re-align tooltip\n    if(this._currentStep !== undefined && this._currentStep !== null) {\n      var oldHelperNumberLayer = document.querySelector('.introjs-helperNumberLayer'),\n        oldArrowLayer        = document.querySelector('.introjs-arrow'),\n        oldtooltipContainer  = document.querySelector('.introjs-tooltip');\n      _placeTooltip.call(this, this._introItems[this._currentStep].element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);\n    }\n\n    //re-align hints\n    _reAlignHints.call(this);\n    return this;\n  }\n\n  /**\n   * Exit from intro\n   *\n   * @api private\n   * @method _exitIntro\n   * @param {Object} targetElement\n   * @param {Boolean} force - Setting to `true` will skip the result of beforeExit callback\n   */\n  function _exitIntro(targetElement, force) {\n    var continueExit = true;\n\n    // calling onbeforeexit callback\n    //\n    // If this callback return `false`, it would halt the process\n    if (this._introBeforeExitCallback !== undefined) {\n      continueExit = this._introBeforeExitCallback.call(this);\n    }\n\n    // skip this check if `force` parameter is `true`\n    // otherwise, if `onbeforeexit` returned `false`, don't exit the intro\n    if (!force && continueExit === false) return;\n\n    //remove overlay layers from the page\n    var overlayLayers = targetElement.querySelectorAll('.introjs-overlay');\n\n    if (overlayLayers && overlayLayers.length) {\n      _forEach(overlayLayers, function (overlayLayer) {\n        overlayLayer.style.opacity = 0;\n        window.setTimeout(function () {\n          if (this.parentNode) {\n            this.parentNode.removeChild(this);\n          }\n        }.bind(overlayLayer), 500);\n      }.bind(this));\n    }\n\n    //remove all helper layers\n    var helperLayer = targetElement.querySelector('.introjs-helperLayer');\n    if (helperLayer) {\n      helperLayer.parentNode.removeChild(helperLayer);\n    }\n\n    var referenceLayer = targetElement.querySelector('.introjs-tooltipReferenceLayer');\n    if (referenceLayer) {\n      referenceLayer.parentNode.removeChild(referenceLayer);\n    }\n\n    //remove disableInteractionLayer\n    var disableInteractionLayer = targetElement.querySelector('.introjs-disableInteraction');\n    if (disableInteractionLayer) {\n      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);\n    }\n\n    //remove intro floating element\n    var floatingElement = document.querySelector('.introjsFloatingElement');\n    if (floatingElement) {\n      floatingElement.parentNode.removeChild(floatingElement);\n    }\n\n    _removeShowElement();\n\n    //remove `introjs-fixParent` class from the elements\n    var fixParents = document.querySelectorAll('.introjs-fixParent');\n    _forEach(fixParents, function (parent) {\n      _removeClass(parent, /introjs-fixParent/g);\n    });\n\n    //clean listeners\n    DOMEvent.off(window, 'keydown', _onKeyDown, this, true);\n    DOMEvent.off(window, 'resize', _onResize, this, true);\n\n    //check if any callback is defined\n    if (this._introExitCallback !== undefined) {\n      this._introExitCallback.call(this);\n    }\n\n    //set the step to zero\n    this._currentStep = undefined;\n  }\n\n  /**\n   * Render tooltip box in the page\n   *\n   * @api private\n   * @method _placeTooltip\n   * @param {HTMLElement} targetElement\n   * @param {HTMLElement} tooltipLayer\n   * @param {HTMLElement} arrowLayer\n   * @param {HTMLElement} helperNumberLayer\n   * @param {Boolean} hintMode\n   */\n  function _placeTooltip(targetElement, tooltipLayer, arrowLayer, helperNumberLayer, hintMode) {\n    var tooltipCssClass = '',\n        currentStepObj,\n        tooltipOffset,\n        targetOffset,\n        windowSize,\n        currentTooltipPosition;\n\n    hintMode = hintMode || false;\n\n    //reset the old style\n    tooltipLayer.style.top        = null;\n    tooltipLayer.style.right      = null;\n    tooltipLayer.style.bottom     = null;\n    tooltipLayer.style.left       = null;\n    tooltipLayer.style.marginLeft = null;\n    tooltipLayer.style.marginTop  = null;\n\n    arrowLayer.style.display = 'inherit';\n\n    if (typeof(helperNumberLayer) !== 'undefined' && helperNumberLayer !== null) {\n      helperNumberLayer.style.top  = null;\n      helperNumberLayer.style.left = null;\n    }\n\n    //prevent error when `this._currentStep` is undefined\n    if (!this._introItems[this._currentStep]) return;\n\n    //if we have a custom css class for each step\n    currentStepObj = this._introItems[this._currentStep];\n    if (typeof (currentStepObj.tooltipClass) === 'string') {\n      tooltipCssClass = currentStepObj.tooltipClass;\n    } else {\n      tooltipCssClass = this._options.tooltipClass;\n    }\n\n    tooltipLayer.className = ('introjs-tooltip ' + tooltipCssClass).replace(/^\\s+|\\s+$/g, '');\n    tooltipLayer.setAttribute('role', 'dialog');\n\n    currentTooltipPosition = this._introItems[this._currentStep].position;\n\n    // Floating is always valid, no point in calculating\n    if (currentTooltipPosition !== \"floating\") { \n      currentTooltipPosition = _determineAutoPosition.call(this, targetElement, tooltipLayer, currentTooltipPosition);\n    }\n\n    var tooltipLayerStyleLeft;\n    targetOffset  = _getOffset(targetElement);\n    tooltipOffset = _getOffset(tooltipLayer);\n    windowSize    = _getWinSize();\n\n    _addClass(tooltipLayer, 'introjs-' + currentTooltipPosition);\n\n    switch (currentTooltipPosition) {\n      case 'top-right-aligned':\n        arrowLayer.className      = 'introjs-arrow bottom-right';\n\n        var tooltipLayerStyleRight = 0;\n        _checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer);\n        tooltipLayer.style.bottom    = (targetOffset.height +  20) + 'px';\n        break;\n\n      case 'top-middle-aligned':\n        arrowLayer.className      = 'introjs-arrow bottom-middle';\n\n        var tooltipLayerStyleLeftRight = targetOffset.width / 2 - tooltipOffset.width / 2;\n\n        // a fix for middle aligned hints\n        if (hintMode) {\n          tooltipLayerStyleLeftRight += 5;\n        }\n\n        if (_checkLeft(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, tooltipLayer)) {\n          tooltipLayer.style.right = null;\n          _checkRight(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, windowSize, tooltipLayer);\n        }\n        tooltipLayer.style.bottom = (targetOffset.height + 20) + 'px';\n        break;\n\n      case 'top-left-aligned':\n      // top-left-aligned is the same as the default top\n      case 'top':\n        arrowLayer.className = 'introjs-arrow bottom';\n\n        tooltipLayerStyleLeft = (hintMode) ? 0 : 15;\n\n        _checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer);\n        tooltipLayer.style.bottom = (targetOffset.height +  20) + 'px';\n        break;\n      case 'right':\n        tooltipLayer.style.left = (targetOffset.width + 20) + 'px';\n        if (targetOffset.top + tooltipOffset.height > windowSize.height) {\n          // In this case, right would have fallen below the bottom of the screen.\n          // Modify so that the bottom of the tooltip connects with the target\n          arrowLayer.className = \"introjs-arrow left-bottom\";\n          tooltipLayer.style.top = \"-\" + (tooltipOffset.height - targetOffset.height - 20) + \"px\";\n        } else {\n          arrowLayer.className = 'introjs-arrow left';\n        }\n        break;\n      case 'left':\n        if (!hintMode && this._options.showStepNumbers === true) {\n          tooltipLayer.style.top = '15px';\n        }\n\n        if (targetOffset.top + tooltipOffset.height > windowSize.height) {\n          // In this case, left would have fallen below the bottom of the screen.\n          // Modify so that the bottom of the tooltip connects with the target\n          tooltipLayer.style.top = \"-\" + (tooltipOffset.height - targetOffset.height - 20) + \"px\";\n          arrowLayer.className = 'introjs-arrow right-bottom';\n        } else {\n          arrowLayer.className = 'introjs-arrow right';\n        }\n        tooltipLayer.style.right = (targetOffset.width + 20) + 'px';\n\n        break;\n      case 'floating':\n        arrowLayer.style.display = 'none';\n\n        //we have to adjust the top and left of layer manually for intro items without element\n        tooltipLayer.style.left   = '50%';\n        tooltipLayer.style.top    = '50%';\n        tooltipLayer.style.marginLeft = '-' + (tooltipOffset.width / 2)  + 'px';\n        tooltipLayer.style.marginTop  = '-' + (tooltipOffset.height / 2) + 'px';\n\n        if (typeof(helperNumberLayer) !== 'undefined' && helperNumberLayer !== null) {\n          helperNumberLayer.style.left = '-' + ((tooltipOffset.width / 2) + 18) + 'px';\n          helperNumberLayer.style.top  = '-' + ((tooltipOffset.height / 2) + 18) + 'px';\n        }\n\n        break;\n      case 'bottom-right-aligned':\n        arrowLayer.className      = 'introjs-arrow top-right';\n\n        tooltipLayerStyleRight = 0;\n        _checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer);\n        tooltipLayer.style.top    = (targetOffset.height +  20) + 'px';\n        break;\n\n      case 'bottom-middle-aligned':\n        arrowLayer.className      = 'introjs-arrow top-middle';\n\n        tooltipLayerStyleLeftRight = targetOffset.width / 2 - tooltipOffset.width / 2;\n\n        // a fix for middle aligned hints\n        if (hintMode) {\n          tooltipLayerStyleLeftRight += 5;\n        }\n\n        if (_checkLeft(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, tooltipLayer)) {\n          tooltipLayer.style.right = null;\n          _checkRight(targetOffset, tooltipLayerStyleLeftRight, tooltipOffset, windowSize, tooltipLayer);\n        }\n        tooltipLayer.style.top = (targetOffset.height + 20) + 'px';\n        break;\n\n      // case 'bottom-left-aligned':\n      // Bottom-left-aligned is the same as the default bottom\n      // case 'bottom':\n      // Bottom going to follow the default behavior\n      default:\n        arrowLayer.className = 'introjs-arrow top';\n\n        tooltipLayerStyleLeft = 0;\n        _checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer);\n        tooltipLayer.style.top    = (targetOffset.height +  20) + 'px';\n    }\n  }\n\n  /**\n   * Set tooltip left so it doesn't go off the right side of the window\n   *\n   * @return boolean true, if tooltipLayerStyleLeft is ok.  false, otherwise.\n   */\n  function _checkRight(targetOffset, tooltipLayerStyleLeft, tooltipOffset, windowSize, tooltipLayer) {\n    if (targetOffset.left + tooltipLayerStyleLeft + tooltipOffset.width > windowSize.width) {\n      // off the right side of the window\n      tooltipLayer.style.left = (windowSize.width - tooltipOffset.width - targetOffset.left) + 'px';\n      return false;\n    }\n    tooltipLayer.style.left = tooltipLayerStyleLeft + 'px';\n    return true;\n  }\n\n  /**\n   * Set tooltip right so it doesn't go off the left side of the window\n   *\n   * @return boolean true, if tooltipLayerStyleRight is ok.  false, otherwise.\n   */\n  function _checkLeft(targetOffset, tooltipLayerStyleRight, tooltipOffset, tooltipLayer) {\n    if (targetOffset.left + targetOffset.width - tooltipLayerStyleRight - tooltipOffset.width < 0) {\n      // off the left side of the window\n      tooltipLayer.style.left = (-targetOffset.left) + 'px';\n      return false;\n    }\n    tooltipLayer.style.right = tooltipLayerStyleRight + 'px';\n    return true;\n  }\n\n  /**\n   * Determines the position of the tooltip based on the position precedence and availability\n   * of screen space.\n   *\n   * @param {Object}    targetElement\n   * @param {Object}    tooltipLayer\n   * @param {String}    desiredTooltipPosition\n   * @return {String}   calculatedPosition\n   */\n  function _determineAutoPosition(targetElement, tooltipLayer, desiredTooltipPosition) {\n\n    // Take a clone of position precedence. These will be the available\n    var possiblePositions = this._options.positionPrecedence.slice();\n\n    var windowSize = _getWinSize();\n    var tooltipHeight = _getOffset(tooltipLayer).height + 10;\n    var tooltipWidth = _getOffset(tooltipLayer).width + 20;\n    var targetElementRect = targetElement.getBoundingClientRect();\n\n    // If we check all the possible areas, and there are no valid places for the tooltip, the element\n    // must take up most of the screen real estate. Show the tooltip floating in the middle of the screen.\n    var calculatedPosition = \"floating\";\n\n    /*\n    * auto determine position \n    */\n\n    // Check for space below\n    if (targetElementRect.bottom + tooltipHeight + tooltipHeight > windowSize.height) {\n      _removeEntry(possiblePositions, \"bottom\");\n    }\n\n    // Check for space above\n    if (targetElementRect.top - tooltipHeight < 0) {\n      _removeEntry(possiblePositions, \"top\");\n    }\n\n    // Check for space to the right\n    if (targetElementRect.right + tooltipWidth > windowSize.width) {\n      _removeEntry(possiblePositions, \"right\");\n    }\n\n    // Check for space to the left\n    if (targetElementRect.left - tooltipWidth < 0) {\n      _removeEntry(possiblePositions, \"left\");\n    }\n\n    // @var {String}  ex: 'right-aligned'\n    var desiredAlignment = (function (pos) {\n      var hyphenIndex = pos.indexOf('-');\n      if (hyphenIndex !== -1) {\n        // has alignment\n        return pos.substr(hyphenIndex);\n      }\n      return '';\n    })(desiredTooltipPosition || '');\n\n    // strip alignment from position\n    if (desiredTooltipPosition) {\n      // ex: \"bottom-right-aligned\"\n      // should return 'bottom'\n      desiredTooltipPosition = desiredTooltipPosition.split('-')[0];\n    }\n\n    if (possiblePositions.length) {\n      if (desiredTooltipPosition !== \"auto\" &&\n          possiblePositions.indexOf(desiredTooltipPosition) > -1) {\n        // If the requested position is in the list, choose that\n        calculatedPosition = desiredTooltipPosition;\n      } else {\n        // Pick the first valid position, in order\n        calculatedPosition = possiblePositions[0];\n      }\n    }\n\n    // only top and bottom positions have optional alignments\n    if (['top', 'bottom'].indexOf(calculatedPosition) !== -1) {\n      calculatedPosition += _determineAutoAlignment(targetElementRect.left, tooltipWidth, windowSize, desiredAlignment);\n    }\n\n    return calculatedPosition;\n  }\n\n  /**\n  * auto-determine alignment\n  * @param {Integer}  offsetLeft\n  * @param {Integer}  tooltipWidth\n  * @param {Object}   windowSize\n  * @param {String}   desiredAlignment\n  * @return {String}  calculatedAlignment\n  */\n  function _determineAutoAlignment (offsetLeft, tooltipWidth, windowSize, desiredAlignment) {\n    var halfTooltipWidth = tooltipWidth / 2,\n      winWidth = Math.min(windowSize.width, window.screen.width),\n      possibleAlignments = ['-left-aligned', '-middle-aligned', '-right-aligned'],\n      calculatedAlignment = '';\n    \n    // valid left must be at least a tooltipWidth\n    // away from right side\n    if (winWidth - offsetLeft < tooltipWidth) {\n      _removeEntry(possibleAlignments, '-left-aligned');\n    }\n\n    // valid middle must be at least half \n    // width away from both sides\n    if (offsetLeft < halfTooltipWidth || \n      winWidth - offsetLeft < halfTooltipWidth) {\n      _removeEntry(possibleAlignments, '-middle-aligned');\n    }\n\n    // valid right must be at least a tooltipWidth\n    // width away from left side\n    if (offsetLeft < tooltipWidth) {\n      _removeEntry(possibleAlignments, '-right-aligned');\n    }\n\n    if (possibleAlignments.length) {\n      if (possibleAlignments.indexOf(desiredAlignment) !== -1) {\n        // the desired alignment is valid\n        calculatedAlignment = desiredAlignment;\n      } else {\n        // pick the first valid position, in order\n        calculatedAlignment = possibleAlignments[0];\n      }\n    } else {\n      // if screen width is too small \n      // for ANY alignment, middle is \n      // probably the best for visibility\n      calculatedAlignment = '-middle-aligned';\n    }\n\n    return calculatedAlignment;\n  }\n\n  /**\n   * Remove an entry from a string array if it's there, does nothing if it isn't there.\n   *\n   * @param {Array} stringArray\n   * @param {String} stringToRemove\n   */\n  function _removeEntry(stringArray, stringToRemove) {\n    if (stringArray.indexOf(stringToRemove) > -1) {\n      stringArray.splice(stringArray.indexOf(stringToRemove), 1);\n    }\n  }\n\n  /**\n   * Update the position of the helper layer on the screen\n   *\n   * @api private\n   * @method _setHelperLayerPosition\n   * @param {Object} helperLayer\n   */\n  function _setHelperLayerPosition(helperLayer) {\n    if (helperLayer) {\n      //prevent error when `this._currentStep` in undefined\n      if (!this._introItems[this._currentStep]) return;\n\n      var currentElement  = this._introItems[this._currentStep],\n          elementPosition = _getOffset(currentElement.element),\n          widthHeightPadding = this._options.helperElementPadding;\n\n      // If the target element is fixed, the tooltip should be fixed as well.\n      // Otherwise, remove a fixed class that may be left over from the previous\n      // step.\n      if (_isFixed(currentElement.element)) {\n        _addClass(helperLayer, 'introjs-fixedTooltip');\n      } else {\n        _removeClass(helperLayer, 'introjs-fixedTooltip');\n      }\n\n      if (currentElement.position === 'floating') {\n        widthHeightPadding = 0;\n      }\n\n      //set new position to helper layer\n      helperLayer.style.cssText = 'width: ' + (elementPosition.width  + widthHeightPadding)  + 'px; ' +\n                                        'height:' + (elementPosition.height + widthHeightPadding)  + 'px; ' +\n                                        'top:'    + (elementPosition.top    - widthHeightPadding / 2)   + 'px;' +\n                                        'left: '  + (elementPosition.left   - widthHeightPadding / 2)   + 'px;';\n\n    }\n  }\n\n  /**\n   * Add disableinteraction layer and adjust the size and position of the layer\n   *\n   * @api private\n   * @method _disableInteraction\n   */\n  function _disableInteraction() {\n    var disableInteractionLayer = document.querySelector('.introjs-disableInteraction');\n\n    if (disableInteractionLayer === null) {\n      disableInteractionLayer = document.createElement('div');\n      disableInteractionLayer.className = 'introjs-disableInteraction';\n      this._targetElement.appendChild(disableInteractionLayer);\n    }\n\n    _setHelperLayerPosition.call(this, disableInteractionLayer);\n  }\n\n  /**\n   * Setting anchors to behave like buttons\n   *\n   * @api private\n   * @method _setAnchorAsButton\n   */\n  function _setAnchorAsButton(anchor){\n    anchor.setAttribute('role', 'button');\n    anchor.tabIndex = 0;\n  }\n\n  /**\n   * Show an element on the page\n   *\n   * @api private\n   * @method _showElement\n   * @param {Object} targetElement\n   */\n  function _showElement(targetElement) {\n    if (typeof (this._introChangeCallback) !== 'undefined') {\n      this._introChangeCallback.call(this, targetElement.element);\n    }\n\n    var self = this,\n        oldHelperLayer = document.querySelector('.introjs-helperLayer'),\n        oldReferenceLayer = document.querySelector('.introjs-tooltipReferenceLayer'),\n        highlightClass = 'introjs-helperLayer',\n        nextTooltipButton,\n        prevTooltipButton,\n        skipTooltipButton,\n        scrollParent;\n\n    //check for a current step highlight class\n    if (typeof (targetElement.highlightClass) === 'string') {\n      highlightClass += (' ' + targetElement.highlightClass);\n    }\n    //check for options highlight class\n    if (typeof (this._options.highlightClass) === 'string') {\n      highlightClass += (' ' + this._options.highlightClass);\n    }\n\n    if (oldHelperLayer !== null) {\n      var oldHelperNumberLayer = oldReferenceLayer.querySelector('.introjs-helperNumberLayer'),\n          oldtooltipLayer      = oldReferenceLayer.querySelector('.introjs-tooltiptext'),\n          oldArrowLayer        = oldReferenceLayer.querySelector('.introjs-arrow'),\n          oldtooltipContainer  = oldReferenceLayer.querySelector('.introjs-tooltip');\n          \n      skipTooltipButton    = oldReferenceLayer.querySelector('.introjs-skipbutton');\n      prevTooltipButton    = oldReferenceLayer.querySelector('.introjs-prevbutton');\n      nextTooltipButton    = oldReferenceLayer.querySelector('.introjs-nextbutton');\n\n      //update or reset the helper highlight class\n      oldHelperLayer.className = highlightClass;\n      //hide the tooltip\n      oldtooltipContainer.style.opacity = 0;\n      oldtooltipContainer.style.display = \"none\";\n\n      if (oldHelperNumberLayer !== null) {\n        var lastIntroItem = this._introItems[(targetElement.step - 2 >= 0 ? targetElement.step - 2 : 0)];\n\n        if (lastIntroItem !== null && (this._direction === 'forward' && lastIntroItem.position === 'floating') || (this._direction === 'backward' && targetElement.position === 'floating')) {\n          oldHelperNumberLayer.style.opacity = 0;\n        }\n      }\n\n      // scroll to element\n      scrollParent = _getScrollParent( targetElement.element );\n\n      if (scrollParent !== document.body) {\n        // target is within a scrollable element\n        _scrollParentToElement(scrollParent, targetElement.element);\n      }\n\n      // set new position to helper layer\n      _setHelperLayerPosition.call(self, oldHelperLayer);\n      _setHelperLayerPosition.call(self, oldReferenceLayer);\n\n      //remove `introjs-fixParent` class from the elements\n      var fixParents = document.querySelectorAll('.introjs-fixParent');\n      _forEach(fixParents, function (parent) {\n        _removeClass(parent, /introjs-fixParent/g);\n      });\n      \n      //remove old classes if the element still exist\n      _removeShowElement();\n\n      //we should wait until the CSS3 transition is competed (it's 0.3 sec) to prevent incorrect `height` and `width` calculation\n      if (self._lastShowElementTimer) {\n        window.clearTimeout(self._lastShowElementTimer);\n      }\n\n      self._lastShowElementTimer = window.setTimeout(function() {\n        //set current step to the label\n        if (oldHelperNumberLayer !== null) {\n          oldHelperNumberLayer.innerHTML = targetElement.step;\n        }\n        //set current tooltip text\n        oldtooltipLayer.innerHTML = targetElement.intro;\n        //set the tooltip position\n        oldtooltipContainer.style.display = \"block\";\n        _placeTooltip.call(self, targetElement.element, oldtooltipContainer, oldArrowLayer, oldHelperNumberLayer);\n\n        //change active bullet\n        if (self._options.showBullets) {\n            oldReferenceLayer.querySelector('.introjs-bullets li > a.active').className = '';\n            oldReferenceLayer.querySelector('.introjs-bullets li > a[data-stepnumber=\"' + targetElement.step + '\"]').className = 'active';\n        }\n        oldReferenceLayer.querySelector('.introjs-progress .introjs-progressbar').style.cssText = 'width:' + _getProgress.call(self) + '%;';\n        oldReferenceLayer.querySelector('.introjs-progress .introjs-progressbar').setAttribute('aria-valuenow', _getProgress.call(self));\n\n        //show the tooltip\n        oldtooltipContainer.style.opacity = 1;\n        if (oldHelperNumberLayer) oldHelperNumberLayer.style.opacity = 1;\n\n        //reset button focus\n        if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null && /introjs-donebutton/gi.test(skipTooltipButton.className)) {\n          // skip button is now \"done\" button\n          skipTooltipButton.focus();\n        } else if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          //still in the tour, focus on next\n          nextTooltipButton.focus();\n        }\n\n        // change the scroll of the window, if needed\n        _scrollTo.call(self, targetElement.scrollTo, targetElement, oldtooltipLayer);\n      }, 350);\n\n      // end of old element if-else condition\n    } else {\n      var helperLayer       = document.createElement('div'),\n          referenceLayer    = document.createElement('div'),\n          arrowLayer        = document.createElement('div'),\n          tooltipLayer      = document.createElement('div'),\n          tooltipTextLayer  = document.createElement('div'),\n          bulletsLayer      = document.createElement('div'),\n          progressLayer     = document.createElement('div'),\n          buttonsLayer      = document.createElement('div');\n\n      helperLayer.className = highlightClass;\n      referenceLayer.className = 'introjs-tooltipReferenceLayer';\n\n      // scroll to element\n      scrollParent = _getScrollParent( targetElement.element );\n\n      if (scrollParent !== document.body) {\n        // target is within a scrollable element\n        _scrollParentToElement(scrollParent, targetElement.element);\n      }\n\n      //set new position to helper layer\n      _setHelperLayerPosition.call(self, helperLayer);\n      _setHelperLayerPosition.call(self, referenceLayer);\n\n      //add helper layer to target element\n      this._targetElement.appendChild(helperLayer);\n      this._targetElement.appendChild(referenceLayer);\n\n      arrowLayer.className = 'introjs-arrow';\n\n      tooltipTextLayer.className = 'introjs-tooltiptext';\n      tooltipTextLayer.innerHTML = targetElement.intro;\n\n      bulletsLayer.className = 'introjs-bullets';\n\n      if (this._options.showBullets === false) {\n        bulletsLayer.style.display = 'none';\n      }\n\n      var ulContainer = document.createElement('ul');\n      ulContainer.setAttribute('role', 'tablist');\n\n      var anchorClick = function () {\n          self.goToStep(this.getAttribute('data-stepnumber'));\n      };\n\n      _forEach(this._introItems, function (item, i) {\n        var innerLi    = document.createElement('li');\n        var anchorLink = document.createElement('a');\n        \n        innerLi.setAttribute('role', 'presentation');\n        anchorLink.setAttribute('role', 'tab');\n\n        anchorLink.onclick = anchorClick;\n\n        if (i === (targetElement.step-1)) {\n          anchorLink.className = 'active';\n        } \n\n        _setAnchorAsButton(anchorLink);\n        anchorLink.innerHTML = \"&nbsp;\";\n        anchorLink.setAttribute('data-stepnumber', item.step);\n\n        innerLi.appendChild(anchorLink);\n        ulContainer.appendChild(innerLi);\n      });\n\n      bulletsLayer.appendChild(ulContainer);\n\n      progressLayer.className = 'introjs-progress';\n\n      if (this._options.showProgress === false) {\n        progressLayer.style.display = 'none';\n      }\n      var progressBar = document.createElement('div');\n      progressBar.className = 'introjs-progressbar';\n      progressBar.setAttribute('role', 'progress');\n      progressBar.setAttribute('aria-valuemin', 0);\n      progressBar.setAttribute('aria-valuemax', 100);\n      progressBar.setAttribute('aria-valuenow', _getProgress.call(this));\n      progressBar.style.cssText = 'width:' + _getProgress.call(this) + '%;';\n\n      progressLayer.appendChild(progressBar);\n\n      buttonsLayer.className = 'introjs-tooltipbuttons';\n      if (this._options.showButtons === false) {\n        buttonsLayer.style.display = 'none';\n      }\n\n      tooltipLayer.className = 'introjs-tooltip';\n      tooltipLayer.appendChild(tooltipTextLayer);\n      tooltipLayer.appendChild(bulletsLayer);\n      tooltipLayer.appendChild(progressLayer);\n\n      //add helper layer number\n      var helperNumberLayer = document.createElement('span');\n      if (this._options.showStepNumbers === true) {\n        helperNumberLayer.className = 'introjs-helperNumberLayer';\n        helperNumberLayer.innerHTML = targetElement.step;\n        referenceLayer.appendChild(helperNumberLayer);\n      }\n\n      tooltipLayer.appendChild(arrowLayer);\n      referenceLayer.appendChild(tooltipLayer);\n\n      //next button\n      nextTooltipButton = document.createElement('a');\n\n      nextTooltipButton.onclick = function() {\n        if (self._introItems.length - 1 !== self._currentStep) {\n          _nextStep.call(self);\n        }\n      };\n\n      _setAnchorAsButton(nextTooltipButton);\n      nextTooltipButton.innerHTML = this._options.nextLabel;\n\n      //previous button\n      prevTooltipButton = document.createElement('a');\n\n      prevTooltipButton.onclick = function() {\n        if (self._currentStep !== 0) {\n          _previousStep.call(self);\n        }\n      };\n\n      _setAnchorAsButton(prevTooltipButton);\n      prevTooltipButton.innerHTML = this._options.prevLabel;\n\n      //skip button\n      skipTooltipButton = document.createElement('a');\n      skipTooltipButton.className = this._options.buttonClass + ' introjs-skipbutton ';\n      _setAnchorAsButton(skipTooltipButton);\n      skipTooltipButton.innerHTML = this._options.skipLabel;\n\n      skipTooltipButton.onclick = function() {\n        if (self._introItems.length - 1 === self._currentStep && typeof (self._introCompleteCallback) === 'function') {\n          self._introCompleteCallback.call(self);\n        }\n\n        if (self._introItems.length - 1 !== self._currentStep && typeof (self._introExitCallback) === 'function') {\n          self._introExitCallback.call(self);\n        }\n\n        if (typeof(self._introSkipCallback) === 'function') {\n          self._introSkipCallback.call(self);\n        }\n\n        _exitIntro.call(self, self._targetElement);\n      };\n\n      buttonsLayer.appendChild(skipTooltipButton);\n\n      //in order to prevent displaying next/previous button always\n      if (this._introItems.length > 1) {\n        buttonsLayer.appendChild(prevTooltipButton);\n        buttonsLayer.appendChild(nextTooltipButton);\n      }\n\n      tooltipLayer.appendChild(buttonsLayer);\n\n      //set proper position\n      _placeTooltip.call(self, targetElement.element, tooltipLayer, arrowLayer, helperNumberLayer);\n\n      // change the scroll of the window, if needed\n      _scrollTo.call(this, targetElement.scrollTo, targetElement, tooltipLayer);\n\n      //end of new element if-else condition\n    }\n\n    // removing previous disable interaction layer\n    var disableInteractionLayer = self._targetElement.querySelector('.introjs-disableInteraction');\n    if (disableInteractionLayer) {\n      disableInteractionLayer.parentNode.removeChild(disableInteractionLayer);\n    }\n\n    //disable interaction\n    if (targetElement.disableInteraction) {\n      _disableInteraction.call(self);\n    }\n\n    // when it's the first step of tour\n    if (this._currentStep === 0 && this._introItems.length > 1) {\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.className = this._options.buttonClass + ' introjs-skipbutton';\n      }\n      if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n        nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton';\n      }\n\n      if (this._options.hidePrev === true) {\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton introjs-hidden';\n        }\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          _addClass(nextTooltipButton, 'introjs-fullbutton');\n        }\n      } else {\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton introjs-disabled';\n        }\n      }\n\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.innerHTML = this._options.skipLabel;\n      }\n    } else if (this._introItems.length - 1 === this._currentStep || this._introItems.length === 1) {\n      // last step of tour\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.innerHTML = this._options.doneLabel;\n        // adding donebutton class in addition to skipbutton\n        _addClass(skipTooltipButton, 'introjs-donebutton');\n      }\n      if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n        prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton';\n      }\n\n      if (this._options.hideNext === true) {\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton introjs-hidden';\n        }\n        if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n          _addClass(prevTooltipButton, 'introjs-fullbutton');\n        }\n      } else {\n        if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n          nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton introjs-disabled';\n        }\n      }\n    } else {\n      // steps between start and end\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.className = this._options.buttonClass + ' introjs-skipbutton';\n      }\n      if (typeof prevTooltipButton !== \"undefined\" && prevTooltipButton !== null) {\n        prevTooltipButton.className = this._options.buttonClass + ' introjs-prevbutton';\n      }\n      if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n        nextTooltipButton.className = this._options.buttonClass + ' introjs-nextbutton';\n      }\n      if (typeof skipTooltipButton !== \"undefined\" && skipTooltipButton !== null) {\n        skipTooltipButton.innerHTML = this._options.skipLabel;\n      }\n    }\n\n    prevTooltipButton.setAttribute('role', 'button');\n    nextTooltipButton.setAttribute('role', 'button');\n    skipTooltipButton.setAttribute('role', 'button');\n\n    //Set focus on \"next\" button, so that hitting Enter always moves you onto the next step\n    if (typeof nextTooltipButton !== \"undefined\" && nextTooltipButton !== null) {\n      nextTooltipButton.focus();\n    }\n\n    _setShowElement(targetElement);\n\n    if (typeof (this._introAfterChangeCallback) !== 'undefined') {\n      this._introAfterChangeCallback.call(this, targetElement.element);\n    }\n  }\n\n  /**\n   * To change the scroll of `window` after highlighting an element\n   *\n   * @api private\n   * @method _scrollTo\n   * @param {String} scrollTo\n   * @param {Object} targetElement\n   * @param {Object} tooltipLayer\n   */\n  function _scrollTo(scrollTo, targetElement, tooltipLayer) {\n    if (scrollTo === 'off') return;  \n    var rect;\n\n    if (!this._options.scrollToElement) return;\n\n    if (scrollTo === 'tooltip') {\n      rect = tooltipLayer.getBoundingClientRect();\n    } else {\n      rect = targetElement.element.getBoundingClientRect();\n    }\n\n    if (!_elementInViewport(targetElement.element)) {\n      var winHeight = _getWinSize().height;\n      var top = rect.bottom - (rect.bottom - rect.top);\n\n      // TODO (afshinm): do we need scroll padding now?\n      // I have changed the scroll option and now it scrolls the window to\n      // the center of the target element or tooltip.\n\n      if (top < 0 || targetElement.element.clientHeight > winHeight) {\n        window.scrollBy(0, rect.top - ((winHeight / 2) -  (rect.height / 2)) - this._options.scrollPadding); // 30px padding from edge to look nice\n\n      //Scroll down\n      } else {\n        window.scrollBy(0, rect.top - ((winHeight / 2) -  (rect.height / 2)) + this._options.scrollPadding); // 30px padding from edge to look nice\n      }\n    }\n  }\n\n  /**\n   * To remove all show element(s)\n   *\n   * @api private\n   * @method _removeShowElement\n   */\n  function _removeShowElement() {\n    var elms = document.querySelectorAll('.introjs-showElement');\n\n    _forEach(elms, function (elm) {\n      _removeClass(elm, /introjs-[a-zA-Z]+/g);\n    });\n  }\n\n  /**\n   * To set the show element\n   * This function set a relative (in most cases) position and changes the z-index\n   *\n   * @api private\n   * @method _setShowElement\n   * @param {Object} targetElement\n   */\n  function _setShowElement(targetElement) {\n    var parentElm;\n    // we need to add this show element class to the parent of SVG elements\n    // because the SVG elements can't have independent z-index\n    if (targetElement.element instanceof SVGElement) {\n      parentElm = targetElement.element.parentNode;\n\n      while (targetElement.element.parentNode !== null) {\n        if (!parentElm.tagName || parentElm.tagName.toLowerCase() === 'body') break;\n\n        if (parentElm.tagName.toLowerCase() === 'svg') {\n          _addClass(parentElm, 'introjs-showElement introjs-relativePosition');\n        }\n\n        parentElm = parentElm.parentNode;\n      }\n    }\n\n    _addClass(targetElement.element, 'introjs-showElement');\n\n    var currentElementPosition = _getPropValue(targetElement.element, 'position');\n    if (currentElementPosition !== 'absolute' &&\n        currentElementPosition !== 'relative' &&\n        currentElementPosition !== 'fixed') {\n      //change to new intro item\n      _addClass(targetElement.element, 'introjs-relativePosition');\n    }\n\n    parentElm = targetElement.element.parentNode;\n    while (parentElm !== null) {\n      if (!parentElm.tagName || parentElm.tagName.toLowerCase() === 'body') break;\n\n      //fix The Stacking Context problem.\n      //More detail: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context\n      var zIndex = _getPropValue(parentElm, 'z-index');\n      var opacity = parseFloat(_getPropValue(parentElm, 'opacity'));\n      var transform = _getPropValue(parentElm, 'transform') || _getPropValue(parentElm, '-webkit-transform') || _getPropValue(parentElm, '-moz-transform') || _getPropValue(parentElm, '-ms-transform') || _getPropValue(parentElm, '-o-transform');\n      if (/[0-9]+/.test(zIndex) || opacity < 1 || (transform !== 'none' && transform !== undefined)) {\n        _addClass(parentElm, 'introjs-fixParent');\n      }\n\n      parentElm = parentElm.parentNode;\n    }\n  }\n\n  /**\n  * Iterates arrays\n  *\n  * @param {Array} arr\n  * @param {Function} forEachFnc\n  * @param {Function} completeFnc\n  * @return {Null}\n  */\n  function _forEach(arr, forEachFnc, completeFnc) {\n    // in case arr is an empty query selector node list\n    if (arr) {\n      for (var i = 0, len = arr.length; i < len; i++) {\n        forEachFnc(arr[i], i);\n      }\n    }\n\n    if (typeof(completeFnc) === 'function') {\n      completeFnc();\n    }\n  }\n\n  /**\n  * Mark any object with an incrementing number\n  * used for keeping track of objects\n  *\n  * @param Object obj   Any object or DOM Element\n  * @param String key\n  * @return Object\n  */\n  var _stamp = (function () {\n    var keys = {};\n    return function stamp (obj, key) {\n      \n      // get group key\n      key = key || 'introjs-stamp';\n\n      // each group increments from 0\n      keys[key] = keys[key] || 0;\n\n      // stamp only once per object\n      if (obj[key] === undefined) {\n        // increment key for each new object\n        obj[key] = keys[key]++;\n      }\n\n      return obj[key];\n    };\n  })();\n\n  /**\n  * DOMEvent Handles all DOM events\n  *\n  * methods:\n  *\n  * on - add event handler\n  * off - remove event\n  */\n  var DOMEvent = (function () {\n    function DOMEvent () {\n      var events_key = 'introjs_event';\n      \n      /**\n      * Gets a unique ID for an event listener\n      *\n      * @param Object obj\n      * @param String type        event type\n      * @param Function listener\n      * @param Object context\n      * @return String\n      */\n      this._id = function (obj, type, listener, context) {\n        return type + _stamp(listener) + (context ? '_' + _stamp(context) : '');\n      };\n\n      /**\n      * Adds event listener\n      *\n      * @param Object obj\n      * @param String type        event type\n      * @param Function listener\n      * @param Object context\n      * @param Boolean useCapture\n      * @return null\n      */\n      this.on = function (obj, type, listener, context, useCapture) {\n        var id = this._id.apply(this, arguments),\n            handler = function (e) {\n              return listener.call(context || obj, e || window.event);\n            };\n\n        if ('addEventListener' in obj) {\n          obj.addEventListener(type, handler, useCapture);\n        } else if ('attachEvent' in obj) {\n          obj.attachEvent('on' + type, handler);\n        }\n\n        obj[events_key] = obj[events_key] || {};\n        obj[events_key][id] = handler;\n      };\n\n      /**\n      * Removes event listener\n      *\n      * @param Object obj\n      * @param String type        event type\n      * @param Function listener\n      * @param Object context\n      * @param Boolean useCapture\n      * @return null\n      */\n      this.off = function (obj, type, listener, context, useCapture) {\n        var id = this._id.apply(this, arguments),\n            handler = obj[events_key] && obj[events_key][id];\n\n        if (!handler) {\n          return;\n        }\n\n        if ('removeEventListener' in obj) {\n          obj.removeEventListener(type, handler, useCapture);\n        } else if ('detachEvent' in obj) {\n          obj.detachEvent('on' + type, handler);\n        }\n\n        obj[events_key][id] = null;\n      };\n    }\n\n    return new DOMEvent();\n  })();\n\n  /**\n   * Append a class to an element\n   *\n   * @api private\n   * @method _addClass\n   * @param {Object} element\n   * @param {String} className\n   * @returns null\n   */\n  function _addClass(element, className) {\n    if (element instanceof SVGElement) {\n      // svg\n      var pre = element.getAttribute('class') || '';\n\n      element.setAttribute('class', pre + ' ' + className);\n    } else {\n      if (element.classList !== undefined) {\n        // check for modern classList property\n        var classes = className.split(' ');\n        _forEach(classes, function (cls) {\n          element.classList.add( cls );\n        });\n      } else if (!element.className.match( className )) {\n        // check if element doesn't already have className\n        element.className += ' ' + className;\n      }\n    }\n  }\n\n  /**\n   * Remove a class from an element\n   *\n   * @api private\n   * @method _removeClass\n   * @param {Object} element\n   * @param {RegExp|String} classNameRegex can be regex or string\n   * @returns null\n   */\n  function _removeClass(element, classNameRegex) {\n    if (element instanceof SVGElement) {\n      var pre = element.getAttribute('class') || '';\n\n      element.setAttribute('class', pre.replace(classNameRegex, '').replace(/^\\s+|\\s+$/g, ''));\n    } else {\n      element.className = element.className.replace(classNameRegex, '').replace(/^\\s+|\\s+$/g, '');\n    }\n  }\n\n  /**\n   * Get an element CSS property on the page\n   * Thanks to JavaScript Kit: http://www.javascriptkit.com/dhtmltutors/dhtmlcascade4.shtml\n   *\n   * @api private\n   * @method _getPropValue\n   * @param {Object} element\n   * @param {String} propName\n   * @returns Element's property value\n   */\n  function _getPropValue (element, propName) {\n    var propValue = '';\n    if (element.currentStyle) { //IE\n      propValue = element.currentStyle[propName];\n    } else if (document.defaultView && document.defaultView.getComputedStyle) { //Others\n      propValue = document.defaultView.getComputedStyle(element, null).getPropertyValue(propName);\n    }\n\n    //Prevent exception in IE\n    if (propValue && propValue.toLowerCase) {\n      return propValue.toLowerCase();\n    } else {\n      return propValue;\n    }\n  }\n\n  /**\n   * Checks to see if target element (or parents) position is fixed or not\n   *\n   * @api private\n   * @method _isFixed\n   * @param {Object} element\n   * @returns Boolean\n   */\n  function _isFixed (element) {\n    var p = element.parentNode;\n\n    if (!p || p.nodeName === 'HTML') {\n      return false;\n    }\n\n    if (_getPropValue(element, 'position') === 'fixed') {\n      return true;\n    }\n\n    return _isFixed(p);\n  }\n\n  /**\n   * Provides a cross-browser way to get the screen dimensions\n   * via: http://stackoverflow.com/questions/5864467/internet-explorer-innerheight\n   *\n   * @api private\n   * @method _getWinSize\n   * @returns {Object} width and height attributes\n   */\n  function _getWinSize() {\n    if (window.innerWidth !== undefined) {\n      return { width: window.innerWidth, height: window.innerHeight };\n    } else {\n      var D = document.documentElement;\n      return { width: D.clientWidth, height: D.clientHeight };\n    }\n  }\n\n  /**\n   * Check to see if the element is in the viewport or not\n   * http://stackoverflow.com/questions/123999/how-to-tell-if-a-dom-element-is-visible-in-the-current-viewport\n   *\n   * @api private\n   * @method _elementInViewport\n   * @param {Object} el\n   */\n  function _elementInViewport(el) {\n    var rect = el.getBoundingClientRect();\n\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      (rect.bottom+80) <= window.innerHeight && // add 80 to get the text right\n      rect.right <= window.innerWidth\n    );\n  }\n\n  /**\n   * Add overlay layer to the page\n   *\n   * @api private\n   * @method _addOverlayLayer\n   * @param {Object} targetElm\n   */\n  function _addOverlayLayer(targetElm) {\n    var overlayLayer = document.createElement('div'),\n        styleText = '',\n        self = this;\n\n    //set css class name\n    overlayLayer.className = 'introjs-overlay';\n\n    //check if the target element is body, we should calculate the size of overlay layer in a better way\n    if (!targetElm.tagName || targetElm.tagName.toLowerCase() === 'body') {\n      styleText += 'top: 0;bottom: 0; left: 0;right: 0;position: fixed;';\n      overlayLayer.style.cssText = styleText;\n    } else {\n      //set overlay layer position\n      var elementPosition = _getOffset(targetElm);\n      if (elementPosition) {\n        styleText += 'width: ' + elementPosition.width + 'px; height:' + elementPosition.height + 'px; top:' + elementPosition.top + 'px;left: ' + elementPosition.left + 'px;';\n        overlayLayer.style.cssText = styleText;\n      }\n    }\n\n    targetElm.appendChild(overlayLayer);\n\n    overlayLayer.onclick = function() {\n      if (self._options.exitOnOverlayClick === true) {\n        _exitIntro.call(self, targetElm);\n      }\n    };\n\n    window.setTimeout(function() {\n      styleText += 'opacity: ' + self._options.overlayOpacity.toString() + ';';\n      overlayLayer.style.cssText = styleText;\n    }, 10);\n\n    return true;\n  }\n\n  /**\n   * Removes open hint (tooltip hint)\n   *\n   * @api private\n   * @method _removeHintTooltip\n   */\n  function _removeHintTooltip() {\n    var tooltip = document.querySelector('.introjs-hintReference');\n\n    if (tooltip) {\n      var step = tooltip.getAttribute('data-step');\n      tooltip.parentNode.removeChild(tooltip);\n      return step;\n    }\n  }\n\n  /**\n   * Start parsing hint items\n   *\n   * @api private\n   * @param {Object} targetElm\n   * @method _startHint\n   */\n  function _populateHints(targetElm) {\n\n    this._introItems = [];\n\n    if (this._options.hints) {\n      _forEach(this._options.hints, function (hint) {\n        var currentItem = _cloneObject(hint);\n\n        if (typeof(currentItem.element) === 'string') {\n          //grab the element with given selector from the page\n          currentItem.element = document.querySelector(currentItem.element);\n        }\n\n        currentItem.hintPosition = currentItem.hintPosition || this._options.hintPosition;\n        currentItem.hintAnimation = currentItem.hintAnimation || this._options.hintAnimation;\n\n        if (currentItem.element !== null) {\n          this._introItems.push(currentItem);\n        }\n      }.bind(this));\n    } else {\n      var hints = targetElm.querySelectorAll('*[data-hint]');\n\n      if (!hints || !hints.length) {\n        return false;\n      }\n\n      //first add intro items with data-step\n      _forEach(hints, function (currentElement) {\n        // hint animation\n        var hintAnimation = currentElement.getAttribute('data-hintanimation');\n\n        if (hintAnimation) {\n          hintAnimation = (hintAnimation === 'true');\n        } else {\n          hintAnimation = this._options.hintAnimation;\n        }\n\n        this._introItems.push({\n          element: currentElement,\n          hint: currentElement.getAttribute('data-hint'),\n          hintPosition: currentElement.getAttribute('data-hintposition') || this._options.hintPosition,\n          hintAnimation: hintAnimation,\n          tooltipClass: currentElement.getAttribute('data-tooltipclass'),\n          position: currentElement.getAttribute('data-position') || this._options.tooltipPosition\n        });\n      }.bind(this));\n    }\n\n    _addHints.call(this);\n\n    /* \n    todo:\n    these events should be removed at some point \n    */\n    DOMEvent.on(document, 'click', _removeHintTooltip, this, false);\n    DOMEvent.on(window, 'resize', _reAlignHints, this, true);\n  }\n\n  /**\n   * Re-aligns all hint elements\n   *\n   * @api private\n   * @method _reAlignHints\n   */\n  function _reAlignHints() {\n    _forEach(this._introItems, function (item) {\n      if (typeof(item.targetElement) === 'undefined') {\n        return;\n      }\n\n      _alignHintPosition.call(this, item.hintPosition, item.element, item.targetElement);\n    }.bind(this));\n  }\n\n  /**\n  * Get a queryselector within the hint wrapper\n  *\n  * @param {String} selector\n  * @return {NodeList|Array}\n  */\n  function _hintQuerySelectorAll(selector) {\n    var hintsWrapper = document.querySelector('.introjs-hints');\n    return (hintsWrapper) ? hintsWrapper.querySelectorAll(selector) : [];\n  }\n\n  /**\n   * Hide a hint\n   *\n   * @api private\n   * @method _hideHint\n   */\n  function _hideHint(stepId) {\n    var hint = _hintQuerySelectorAll('.introjs-hint[data-step=\"' + stepId + '\"]')[0];\n    \n    _removeHintTooltip.call(this);\n\n    if (hint) {\n      _addClass(hint, 'introjs-hidehint');\n    }\n\n    // call the callback function (if any)\n    if (typeof (this._hintCloseCallback) !== 'undefined') {\n      this._hintCloseCallback.call(this, stepId);\n    }\n  }\n\n  /**\n   * Hide all hints\n   *\n   * @api private\n   * @method _hideHints\n   */\n  function _hideHints() {\n    var hints = _hintQuerySelectorAll('.introjs-hint');\n\n    _forEach(hints, function (hint) {\n      _hideHint.call(this, hint.getAttribute('data-step'));\n    }.bind(this));\n  }\n\n  /**\n   * Show all hints\n   *\n   * @api private\n   * @method _showHints\n   */\n  function _showHints() {\n    var hints = _hintQuerySelectorAll('.introjs-hint');\n\n    if (hints && hints.length) {\n      _forEach(hints, function (hint) {\n        _showHint.call(this, hint.getAttribute('data-step'));\n      }.bind(this));\n    } else {\n      _populateHints.call(this, this._targetElement);\n    }\n  }\n\n  /**\n   * Show a hint\n   *\n   * @api private\n   * @method _showHint\n   */\n  function _showHint(stepId) {\n    var hint = _hintQuerySelectorAll('.introjs-hint[data-step=\"' + stepId + '\"]')[0];\n\n    if (hint) {\n      _removeClass(hint, /introjs-hidehint/g);\n    }\n  }\n\n  /**\n   * Removes all hint elements on the page\n   * Useful when you want to destroy the elements and add them again (e.g. a modal or popup)\n   *\n   * @api private\n   * @method _removeHints\n   */\n  function _removeHints() {\n    var hints = _hintQuerySelectorAll('.introjs-hint');\n\n    _forEach(hints, function (hint) {\n      _removeHint.call(this, hint.getAttribute('data-step'));\n    }.bind(this));\n  }\n\n  /**\n   * Remove one single hint element from the page\n   * Useful when you want to destroy the element and add them again (e.g. a modal or popup)\n   * Use removeHints if you want to remove all elements.\n   *\n   * @api private\n   * @method _removeHint\n   */\n  function _removeHint(stepId) {\n    var hint = _hintQuerySelectorAll('.introjs-hint[data-step=\"' + stepId + '\"]')[0];\n\n    if (hint) {\n      hint.parentNode.removeChild(hint);\n    }\n  }\n\n  /**\n   * Add all available hints to the page\n   *\n   * @api private\n   * @method _addHints\n   */\n  function _addHints() {\n    var self = this;\n\n    var hintsWrapper = document.querySelector('.introjs-hints');\n\n    if (hintsWrapper === null) {\n      hintsWrapper = document.createElement('div');\n      hintsWrapper.className = 'introjs-hints';\n    }\n\n    /**\n    * Returns an event handler unique to the hint iteration\n    * \n    * @param {Integer} i\n    * @return {Function}\n    */\n    var getHintClick = function (i) {\n      return function(e) {\n        var evt = e ? e : window.event;\n        \n        if (evt.stopPropagation) {\n          evt.stopPropagation();\n        }\n\n        if (evt.cancelBubble !== null) {\n          evt.cancelBubble = true;\n        }\n\n        _showHintDialog.call(self, i);\n      };\n    };\n\n    _forEach(this._introItems, function(item, i) {\n      // avoid append a hint twice\n      if (document.querySelector('.introjs-hint[data-step=\"' + i + '\"]')) {\n        return;\n      }\n\n      var hint = document.createElement('a');\n      _setAnchorAsButton(hint);\n\n      hint.onclick = getHintClick(i);\n\n      hint.className = 'introjs-hint';\n\n      if (!item.hintAnimation) {\n        _addClass(hint, 'introjs-hint-no-anim');\n      }\n\n      // hint's position should be fixed if the target element's position is fixed\n      if (_isFixed(item.element)) {\n        _addClass(hint, 'introjs-fixedhint');\n      }\n\n      var hintDot = document.createElement('div');\n      hintDot.className = 'introjs-hint-dot';\n      var hintPulse = document.createElement('div');\n      hintPulse.className = 'introjs-hint-pulse';\n\n      hint.appendChild(hintDot);\n      hint.appendChild(hintPulse);\n      hint.setAttribute('data-step', i);\n\n      // we swap the hint element with target element\n      // because _setHelperLayerPosition uses `element` property\n      item.targetElement = item.element;\n      item.element = hint;\n\n      // align the hint position\n      _alignHintPosition.call(this, item.hintPosition, hint, item.targetElement);\n\n      hintsWrapper.appendChild(hint);\n    }.bind(this));\n\n    // adding the hints wrapper\n    document.body.appendChild(hintsWrapper);\n\n    // call the callback function (if any)\n    if (typeof (this._hintsAddedCallback) !== 'undefined') {\n      this._hintsAddedCallback.call(this);\n    }\n  }\n\n  /**\n   * Aligns hint position\n   *\n   * @api private\n   * @method _alignHintPosition\n   * @param {String} position\n   * @param {Object} hint\n   * @param {Object} element\n   */\n  function _alignHintPosition(position, hint, element) {\n    // get/calculate offset of target element\n    var offset = _getOffset.call(this, element);\n    var iconWidth = 20;\n    var iconHeight = 20;\n\n    // align the hint element\n    switch (position) {\n      default:\n      case 'top-left':\n        hint.style.left = offset.left + 'px';\n        hint.style.top = offset.top + 'px';\n        break;\n      case 'top-right':\n        hint.style.left = (offset.left + offset.width - iconWidth) + 'px';\n        hint.style.top = offset.top + 'px';\n        break;\n      case 'bottom-left':\n        hint.style.left = offset.left + 'px';\n        hint.style.top = (offset.top + offset.height - iconHeight) + 'px';\n        break;\n      case 'bottom-right':\n        hint.style.left = (offset.left + offset.width - iconWidth) + 'px';\n        hint.style.top = (offset.top + offset.height - iconHeight) + 'px';\n        break;\n      case 'middle-left':\n        hint.style.left = offset.left + 'px';\n        hint.style.top = (offset.top + (offset.height - iconHeight) / 2) + 'px';\n        break;\n      case 'middle-right':\n        hint.style.left = (offset.left + offset.width - iconWidth) + 'px';\n        hint.style.top = (offset.top + (offset.height - iconHeight) / 2) + 'px';\n        break;\n      case 'middle-middle':\n        hint.style.left = (offset.left + (offset.width - iconWidth) / 2) + 'px';\n        hint.style.top = (offset.top + (offset.height - iconHeight) / 2) + 'px';\n        break;\n      case 'bottom-middle':\n        hint.style.left = (offset.left + (offset.width - iconWidth) / 2) + 'px';\n        hint.style.top = (offset.top + offset.height - iconHeight) + 'px';\n        break;\n      case 'top-middle':\n        hint.style.left = (offset.left + (offset.width - iconWidth) / 2) + 'px';\n        hint.style.top = offset.top + 'px';\n        break;\n    }\n  }\n\n  /**\n   * Triggers when user clicks on the hint element\n   *\n   * @api private\n   * @method _showHintDialog\n   * @param {Number} stepId\n   */\n  function _showHintDialog(stepId) {\n    var hintElement = document.querySelector('.introjs-hint[data-step=\"' + stepId + '\"]');\n    var item = this._introItems[stepId];\n\n    // call the callback function (if any)\n    if (typeof (this._hintClickCallback) !== 'undefined') {\n      this._hintClickCallback.call(this, hintElement, item, stepId);\n    }\n\n    // remove all open tooltips\n    var removedStep = _removeHintTooltip.call(this);\n\n    // to toggle the tooltip\n    if (parseInt(removedStep, 10) === stepId) {\n      return;\n    }\n\n    var tooltipLayer = document.createElement('div');\n    var tooltipTextLayer = document.createElement('div');\n    var arrowLayer = document.createElement('div');\n    var referenceLayer = document.createElement('div');\n\n    tooltipLayer.className = 'introjs-tooltip';\n\n    tooltipLayer.onclick = function (e) {\n      //IE9 & Other Browsers\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      }\n      //IE8 and Lower\n      else {\n        e.cancelBubble = true;\n      }\n    };\n\n    tooltipTextLayer.className = 'introjs-tooltiptext';\n\n    var tooltipWrapper = document.createElement('p');\n    tooltipWrapper.innerHTML = item.hint;\n\n    var closeButton = document.createElement('a');\n    closeButton.className = this._options.buttonClass;\n    closeButton.setAttribute('role', 'button');\n    closeButton.innerHTML = this._options.hintButtonLabel;\n    closeButton.onclick = _hideHint.bind(this, stepId);\n\n    tooltipTextLayer.appendChild(tooltipWrapper);\n    tooltipTextLayer.appendChild(closeButton);\n\n    arrowLayer.className = 'introjs-arrow';\n    tooltipLayer.appendChild(arrowLayer);\n\n    tooltipLayer.appendChild(tooltipTextLayer);\n\n    // set current step for _placeTooltip function\n    this._currentStep = hintElement.getAttribute('data-step');\n\n    // align reference layer position\n    referenceLayer.className = 'introjs-tooltipReferenceLayer introjs-hintReference';\n    referenceLayer.setAttribute('data-step', hintElement.getAttribute('data-step'));\n    _setHelperLayerPosition.call(this, referenceLayer);\n\n    referenceLayer.appendChild(tooltipLayer);\n    document.body.appendChild(referenceLayer);\n\n    //set proper position\n    _placeTooltip.call(this, hintElement, tooltipLayer, arrowLayer, null, true);\n  }\n\n  /**\n   * Get an element position on the page\n   * Thanks to `meouw`: http://stackoverflow.com/a/442474/375966\n   *\n   * @api private\n   * @method _getOffset\n   * @param {Object} element\n   * @returns Element's position info\n   */\n  function _getOffset(element) {\n    var body = document.body;\n    var docEl = document.documentElement;\n    var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;\n    var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;\n    var x = element.getBoundingClientRect();\n    return {\n      top: x.top + scrollTop,\n      width: x.width,\n      height: x.height,\n      left: x.left + scrollLeft\n    };\n  }\n\n  /**\n  * Find the nearest scrollable parent\n  * copied from https://stackoverflow.com/questions/35939886/find-first-scrollable-parent\n  *\n  * @param Element element\n  * @return Element\n  */\n  function _getScrollParent(element) {\n    var style = window.getComputedStyle(element);\n    var excludeStaticParent = (style.position === \"absolute\");\n    var overflowRegex = /(auto|scroll)/;\n\n    if (style.position === \"fixed\") return document.body;\n    \n    for (var parent = element; (parent = parent.parentElement);) {\n      style = window.getComputedStyle(parent);\n      if (excludeStaticParent && style.position === \"static\") {\n        continue;\n      }\n      if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) return parent;\n    }\n\n    return document.body;\n  }\n\n  /**\n  * scroll a scrollable element to a child element\n  *\n  * @param Element parent\n  * @param Element element\n  * @return Null\n  */\n  function _scrollParentToElement (parent, element) {\n    parent.scrollTop = element.offsetTop - parent.offsetTop;\n  }\n\n  /**\n   * Gets the current progress percentage\n   *\n   * @api private\n   * @method _getProgress\n   * @returns current progress percentage\n   */\n  function _getProgress() {\n    // Steps are 0 indexed\n    var currentStep = parseInt((this._currentStep + 1), 10);\n    return ((currentStep / this._introItems.length) * 100);\n  }\n\n  /**\n   * Overwrites obj1's values with obj2's and adds obj2's if non existent in obj1\n   * via: http://stackoverflow.com/questions/171251/how-can-i-merge-properties-of-two-javascript-objects-dynamically\n   *\n   * @param obj1\n   * @param obj2\n   * @returns obj3 a new object based on obj1 and obj2\n   */\n  function _mergeOptions(obj1,obj2) {\n    var obj3 = {},\n      attrname;\n    for (attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n  }\n\n  var introJs = function (targetElm) {\n    var instance;\n\n    if (typeof (targetElm) === 'object') {\n      //Ok, create a new instance\n      instance = new IntroJs(targetElm);\n\n    } else if (typeof (targetElm) === 'string') {\n      //select the target element with query selector\n      var targetElement = document.querySelector(targetElm);\n\n      if (targetElement) {\n        instance = new IntroJs(targetElement);\n      } else {\n        throw new Error('There is no element with given selector.');\n      }\n    } else {\n      instance = new IntroJs(document.body);\n    }\n    // add instance to list of _instances\n    // passing group to _stamp to increment\n    // from 0 onward somewhat reliably\n    introJs.instances[ _stamp(instance, 'introjs-instance') ] = instance;\n\n    return instance;\n  };\n\n  /**\n   * Current IntroJs version\n   *\n   * @property version\n   * @type String\n   */\n  introJs.version = VERSION;\n\n  /**\n  * key-val object helper for introJs instances\n  *\n  * @property instances\n  * @type Object\n  */\n  introJs.instances = {};\n\n  //Prototype\n  introJs.fn = IntroJs.prototype = {\n    clone: function () {\n      return new IntroJs(this);\n    },\n    setOption: function(option, value) {\n      this._options[option] = value;\n      return this;\n    },\n    setOptions: function(options) {\n      this._options = _mergeOptions(this._options, options);\n      return this;\n    },\n    start: function (group) {\n      _introForElement.call(this, this._targetElement, group);\n      return this;\n    },\n    goToStep: function(step) {\n      _goToStep.call(this, step);\n      return this;\n    },\n    addStep: function(options) {\n      if (!this._options.steps) {\n        this._options.steps = [];\n      }\n\n      this._options.steps.push(options);\n\n      return this;\n    },\n    addSteps: function(steps) {\n      if (!steps.length) return;\n\n      for(var index = 0; index < steps.length; index++) {\n        this.addStep(steps[index]);\n      }\n\n      return this;\n    },\n    goToStepNumber: function(step) {\n      _goToStepNumber.call(this, step);\n\n      return this;\n    },\n    nextStep: function() {\n      _nextStep.call(this);\n      return this;\n    },\n    previousStep: function() {\n      _previousStep.call(this);\n      return this;\n    },\n    exit: function(force) {\n      _exitIntro.call(this, this._targetElement, force);\n      return this;\n    },\n    refresh: function() {\n      _refresh.call(this);\n      return this;\n    },\n    onbeforechange: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introBeforeChangeCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onbeforechange was not a function');\n      }\n      return this;\n    },\n    onchange: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introChangeCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onchange was not a function.');\n      }\n      return this;\n    },\n    onafterchange: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introAfterChangeCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onafterchange was not a function');\n      }\n      return this;\n    },\n    oncomplete: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introCompleteCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for oncomplete was not a function.');\n      }\n      return this;\n    },\n    onhintsadded: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._hintsAddedCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onhintsadded was not a function.');\n      }\n      return this;\n    },\n    onhintclick: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._hintClickCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onhintclick was not a function.');\n      }\n      return this;\n    },\n    onhintclose: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._hintCloseCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onhintclose was not a function.');\n      }\n      return this;\n    },\n    onexit: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introExitCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onexit was not a function.');\n      }\n      return this;\n    },\n    onskip: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introSkipCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onskip was not a function.');\n      }\n      return this;\n    },\n    onbeforeexit: function(providedCallback) {\n      if (typeof (providedCallback) === 'function') {\n        this._introBeforeExitCallback = providedCallback;\n      } else {\n        throw new Error('Provided callback for onbeforeexit was not a function.');\n      }\n      return this;\n    },\n    addHints: function() {\n      _populateHints.call(this, this._targetElement);\n      return this;\n    },\n    hideHint: function (stepId) {\n      _hideHint.call(this, stepId);\n      return this;\n    },\n    hideHints: function () {\n      _hideHints.call(this);\n      return this;\n    },\n    showHint: function (stepId) {\n      _showHint.call(this, stepId);\n      return this;\n    },\n    showHints: function () {\n      _showHints.call(this);\n      return this;\n    },\n    removeHints: function () {\n      _removeHints.call(this);\n      return this;\n    },\n    removeHint: function (stepId) {\n      _removeHint.call(this, stepId);\n      return this;\n    },\n    showHintDialog: function (stepId) {\n      _showHintDialog.call(this, stepId);\n      return this;\n    }\n  };\n\n  return introJs;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/intro.js/intro.js\n");

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcz8zMjBjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixzQkFBc0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/object-assign/index.js\n");

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar printWarning = function() {};\n\nif (true) {\n  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (true) {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (true) {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcy5qcz9hMTVjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjs7QUFFQSxJQUFJLElBQXFDO0FBQ3pDLDZCQUE2QixtQkFBTyxDQUFDLHlGQUE0QjtBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBcUM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRHQUE0RztBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sSUFBcUM7QUFDM0M7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTtcblxuICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIHRleHQ7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIC8vIC0tLSBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCAtLS1cbiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfTtcbn1cblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/RnVuY3Rpb259IGdldFN0YWNrIFJldHVybnMgdGhlIGNvbXBvbmVudCBzdGFjay5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZ2V0U3RhY2spIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIGZhaWwgdGhlIHJlbmRlciBwaGFzZSB3aGVyZSBpdCBkaWRuJ3QgZmFpbCBiZWZvcmUuIFNvIHdlIGxvZyBpdC5cbiAgICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZVxuICAgICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoXG4gICAgICAgICAgICAgIChjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycpICsgJzogJyArIGxvY2F0aW9uICsgJyB0eXBlIGAnICsgdHlwZVNwZWNOYW1lICsgJ2AgaXMgaW52YWxpZDsgJyArXG4gICAgICAgICAgICAgICdpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UsIGJ1dCByZWNlaXZlZCBgJyArIHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSArICdgLidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciAmJiAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJyArXG4gICAgICAgICAgICBsb2NhdGlvbiArICcgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgK1xuICAgICAgICAgICAgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICcgKyB0eXBlb2YgZXJyb3IgKyAnLiAnICtcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICtcbiAgICAgICAgICAgICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgK1xuICAgICAgICAgICAgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICAgIHZhciBzdGFjayA9IGdldFN0YWNrID8gZ2V0U3RhY2soKSA6ICcnO1xuXG4gICAgICAgICAgcHJpbnRXYXJuaW5nKFxuICAgICAgICAgICAgJ0ZhaWxlZCAnICsgbG9jYXRpb24gKyAnIHR5cGU6ICcgKyBlcnJvci5tZXNzYWdlICsgKHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXNldHMgd2FybmluZyBjYWNoZSB3aGVuIHRlc3RpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2hlY2tQcm9wVHlwZXMucmVzZXRXYXJuaW5nQ2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNoZWNrUHJvcFR5cGVzO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/prop-types/checkPropTypes.js\n");

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\nvar assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n\nvar ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ \"./node_modules/prop-types/lib/ReactPropTypesSecret.js\");\nvar checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ \"./node_modules/prop-types/checkPropTypes.js\");\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning = function() {};\n\nif (true) {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (true) {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if ( true && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (true) {\n        if (arguments.length > 1) {\n          printWarning(\n            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n          );\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/prop-types/factoryWithTypeCheckers.js\n");

/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (true) {\n  var ReactIs = __webpack_require__(/*! react-is */ \"./node_modules/react-is/index.js\");\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ \"./node_modules/prop-types/factoryWithTypeCheckers.js\")(ReactIs.isElement, throwOnDirectAccess);\n} else {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcz9kN2JjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLElBQXFDO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLGtEQUFVOztBQUVsQztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQU8sQ0FBQyx1RkFBMkI7QUFDdEQsQ0FBQyxNQUFNLEVBSU4iLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prop-types/index.js\n");

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanM/NTliMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWI7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/prop-types/lib/ReactPropTypesSecret.js\n");

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/** @license React v16.8.6\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\n\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' ||\n  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);\n}\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning = function () {};\n\n{\n  var printWarning = function (format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function (condition, format) {\n    if (format === undefined) {\n      throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nvar lowPriorityWarning$1 = lowPriorityWarning;\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n              default:\n                return $$typeof;\n            }\n        }\n      case REACT_LAZY_TYPE:\n      case REACT_MEMO_TYPE:\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n}\n\n// AsyncMode is deprecated along with isAsyncMode\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\n\nvar hasWarnedAboutDeprecatedIsAsyncMode = false;\n\n// AsyncMode should be deprecated\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true;\n      lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.typeOf = typeOf;\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isValidElementType = isValidElementType;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-is/cjs/react-is.development.js\n");

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ \"./node_modules/react-is/cjs/react-is.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanM/NGNlYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJLEtBQXFDLEVBQUUsRUFFMUM7QUFDRCxtQkFBbUIsbUJBQU8sQ0FBQywwRkFBK0I7QUFDMUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-is/index.js\n");

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(/*! ./urls */ \"./node_modules/style-loader/lib/urls.js\");\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = \"text/css\";\n\t}\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/addStyles.js\n");

/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2Y2ZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXLEVBQUU7QUFDckQsd0NBQXdDLFdBQVcsRUFBRTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRztBQUNIO0FBQ0EsOERBQThEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/style-loader/lib/urls.js\n");

/***/ }),

/***/ "./src/lib/components/Hello.react.js":
/*!*******************************************!*\
  !*** ./src/lib/components/Hello.react.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(/*! react */ \"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = __webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\n__webpack_require__(/*! ../../../assets/intro.js */ \"./assets/intro.js\");\n\n__webpack_require__(/*! ../../../assets/introjs.css */ \"./assets/introjs.css\");\n\nvar _intro = __webpack_require__(/*! intro.js-react */ \"./node_modules/intro.js-react/lib/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\n\nvar onExit = function onExit() {\n  undefined.setState(function () {\n    return { stepsEnabled: false };\n  });\n};\n\nvar Hello = function (_Component) {\n  _inherits(Hello, _Component);\n\n  function Hello(props) {\n    _classCallCheck(this, Hello);\n\n    var _this = _possibleConstructorReturn(this, (Hello.__proto__ || Object.getPrototypeOf(Hello)).call(this, props));\n\n    _this.state = {\n      stepsEnabled: true,\n      initialStep: 0\n    };\n    return _this;\n  }\n\n  _createClass(Hello, [{\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          id = _props.id,\n          label = _props.label,\n          setProps = _props.setProps,\n          value = _props.value,\n          steps = _props.steps;\n      var _state = this.state,\n          stepsEnabled = _state.stepsEnabled,\n          initialStep = _state.initialStep;\n\n      return _react2.default.createElement(\n        'div',\n        { id: id },\n        _react2.default.createElement(_intro.Steps, {\n          enabled: stepsEnabled,\n          steps: steps,\n          initialStep: 0,\n          onExit: this.onExit\n        })\n      );\n    }\n  }]);\n\n  return Hello;\n}(_react.Component);\n\nexports.default = Hello;\n\n\nHello.defaultProps = {\n  stepsEnabled: true\n};\n\nHello.propTypes = {\n  /**\n   * The ID used to identify this component in Dash callbacks\n   */\n  id: _propTypes2.default.string,\n\n  /**\n   * A label that will be printed when this component is rendered.\n   */\n  label: _propTypes2.default.string.isRequired,\n\n  /**\n   * The value displayed in the input\n   */\n  value: _propTypes2.default.string,\n\n  /**\n   * Dash-assigned callback that should be called whenever any of the\n   * properties change\n   */\n  setProps: _propTypes2.default.func,\n  /**\n   * List of dictionaries containing each step, with \"intro\" and \"element\"\n   * keys, at a minimum.\n   */\n  steps: _propTypes2.default.array\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9zcmMvbGliL2NvbXBvbmVudHMvSGVsbG8ucmVhY3QuanM/NGViMSJdLCJuYW1lcyI6WyJvbkV4aXQiLCJzZXRTdGF0ZSIsInN0ZXBzRW5hYmxlZCIsIkhlbGxvIiwicHJvcHMiLCJzdGF0ZSIsImluaXRpYWxTdGVwIiwiaWQiLCJsYWJlbCIsInNldFByb3BzIiwidmFsdWUiLCJzdGVwcyIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJmdW5jIiwiYXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7O0FBUUEsSUFBSUEsU0FBUyxTQUFUQSxNQUFTLEdBQU07QUFDZixZQUFLQyxRQUFMLENBQWM7QUFBQSxXQUFPLEVBQUVDLGNBQWMsS0FBaEIsRUFBUDtBQUFBLEdBQWQ7QUFDSCxDQUZEOztJQUlxQkMsSzs7O0FBQ2pCLGlCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUEsOEdBQ1RBLEtBRFM7O0FBRWxCLFVBQUtDLEtBQUwsR0FBYTtBQUNUSCxvQkFBYyxJQURMO0FBRVRJLG1CQUFhO0FBRkosS0FBYjtBQUZrQjtBQU1yQjs7Ozs2QkFDVztBQUFBLG1CQUN1QyxLQUFLRixLQUQ1QztBQUFBLFVBQ0VHLEVBREYsVUFDRUEsRUFERjtBQUFBLFVBQ01DLEtBRE4sVUFDTUEsS0FETjtBQUFBLFVBQ2FDLFFBRGIsVUFDYUEsUUFEYjtBQUFBLFVBQ3VCQyxLQUR2QixVQUN1QkEsS0FEdkI7QUFBQSxVQUM4QkMsS0FEOUIsVUFDOEJBLEtBRDlCO0FBQUEsbUJBRWlDLEtBQUtOLEtBRnRDO0FBQUEsVUFFR0gsWUFGSCxVQUVHQSxZQUZIO0FBQUEsVUFFaUJJLFdBRmpCLFVBRWlCQSxXQUZqQjs7QUFHTCxhQUNJO0FBQUE7QUFBQSxVQUFLLElBQUlDLEVBQVQ7QUFDRSxzQ0FBQyxZQUFEO0FBQ0UsbUJBQVNMLFlBRFg7QUFFRSxpQkFBT1MsS0FGVDtBQUdFLHVCQUFhLENBSGY7QUFJRSxrQkFBUSxLQUFLWDtBQUpmO0FBREYsT0FESjtBQVVIOzs7O0VBckI4QlksZ0I7O2tCQUFkVCxLOzs7QUF3QnJCQSxNQUFNVSxZQUFOLEdBQXFCO0FBQ3BCWCxnQkFBYztBQURNLENBQXJCOztBQUlBQyxNQUFNVyxTQUFOLEdBQWtCO0FBQ2Q7OztBQUdBUCxNQUFJUSxvQkFBVUMsTUFKQTs7QUFNZDs7O0FBR0FSLFNBQU9PLG9CQUFVQyxNQUFWLENBQWlCQyxVQVRWOztBQVdkOzs7QUFHQVAsU0FBT0ssb0JBQVVDLE1BZEg7O0FBZ0JkOzs7O0FBSUFQLFlBQVVNLG9CQUFVRyxJQXBCTjtBQXFCZDs7OztBQUlBUCxTQUFPSSxvQkFBVUk7QUF6QkgsQ0FBbEIiLCJmaWxlIjoiLi9zcmMvbGliL2NvbXBvbmVudHMvSGVsbG8ucmVhY3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtDb21wb25lbnR9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgJy4uLy4uLy4uL2Fzc2V0cy9pbnRyby5qcydcbmltcG9ydCAnLi4vLi4vLi4vYXNzZXRzL2ludHJvanMuY3NzJ1xuaW1wb3J0IHsgU3RlcHMsIEhpbnRzIH0gZnJvbSAnaW50cm8uanMtcmVhY3QnXG5cbi8qKlxuICogRXhhbXBsZUNvbXBvbmVudCBpcyBhbiBleGFtcGxlIGNvbXBvbmVudC5cbiAqIEl0IHRha2VzIGEgcHJvcGVydHksIGBsYWJlbGAsIGFuZFxuICogZGlzcGxheXMgaXQuXG4gKiBJdCByZW5kZXJzIGFuIGlucHV0IHdpdGggdGhlIHByb3BlcnR5IGB2YWx1ZWBcbiAqIHdoaWNoIGlzIGVkaXRhYmxlIGJ5IHRoZSB1c2VyLlxuICovXG5cbnZhciBvbkV4aXQgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBzdGVwc0VuYWJsZWQ6IGZhbHNlfSkpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVsbG8gZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcblx0ICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIFx0c3RlcHNFbmFibGVkOiB0cnVlLFxuICAgICAgICBcdGluaXRpYWxTdGVwOiAwLFxuICAgIFx0fTtcblx0fVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge2lkLCBsYWJlbCwgc2V0UHJvcHMsIHZhbHVlLCBzdGVwc30gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCB7IHN0ZXBzRW5hYmxlZCwgaW5pdGlhbFN0ZXAsfSA9IHRoaXMuc3RhdGU7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGlkPXtpZH0+XG4gICAgICAgICAgICAgIDxTdGVwcyAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGVuYWJsZWQ9e3N0ZXBzRW5hYmxlZH1cbiAgICAgICAgICAgICAgICBzdGVwcz17c3RlcHN9XG4gICAgICAgICAgICAgICAgaW5pdGlhbFN0ZXA9ezB9XG4gICAgICAgICAgICAgICAgb25FeGl0PXt0aGlzLm9uRXhpdH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cbn1cblxuSGVsbG8uZGVmYXVsdFByb3BzID0ge1xuXHRzdGVwc0VuYWJsZWQ6IHRydWUsXG59O1xuXG5IZWxsby5wcm9wVHlwZXMgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIElEIHVzZWQgdG8gaWRlbnRpZnkgdGhpcyBjb21wb25lbnQgaW4gRGFzaCBjYWxsYmFja3NcbiAgICAgKi9cbiAgICBpZDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIEEgbGFiZWwgdGhhdCB3aWxsIGJlIHByaW50ZWQgd2hlbiB0aGlzIGNvbXBvbmVudCBpcyByZW5kZXJlZC5cbiAgICAgKi9cbiAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGRpc3BsYXllZCBpbiB0aGUgaW5wdXRcbiAgICAgKi9cbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAgIC8qKlxuICAgICAqIERhc2gtYXNzaWduZWQgY2FsbGJhY2sgdGhhdCBzaG91bGQgYmUgY2FsbGVkIHdoZW5ldmVyIGFueSBvZiB0aGVcbiAgICAgKiBwcm9wZXJ0aWVzIGNoYW5nZVxuICAgICAqL1xuICAgIHNldFByb3BzOiBQcm9wVHlwZXMuZnVuYyxcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGRpY3Rpb25hcmllcyBjb250YWluaW5nIGVhY2ggc3RlcCwgd2l0aCBcImludHJvXCIgYW5kIFwiZWxlbWVudFwiXG4gICAgICoga2V5cywgYXQgYSBtaW5pbXVtLlxuICAgICAqL1xuICAgIHN0ZXBzOiBQcm9wVHlwZXMuYXJyYXksXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/lib/components/Hello.react.js\n");

/***/ }),

/***/ "./src/lib/index.js":
/*!**************************!*\
  !*** ./src/lib/index.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Hello = undefined;\n\nvar _Hello = __webpack_require__(/*! ./components/Hello.react */ \"./src/lib/components/Hello.react.js\");\n\nvar _Hello2 = _interopRequireDefault(_Hello);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.Hello = _Hello2.default; /* eslint-disable import/prefer-default-export *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvLi9zcmMvbGliL2luZGV4LmpzP2Q3NWEiXSwibmFtZXMiOlsiSGVsbG8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7Ozs7O1FBRUlBLEssR0FBQUEsZSxFQUhKIiwiZmlsZSI6Ii4vc3JjL2xpYi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmltcG9ydCBIZWxsbyBmcm9tICcuL2NvbXBvbmVudHMvSGVsbG8ucmVhY3QnO1xuZXhwb3J0IHtcbiAgICBIZWxsb1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/lib/index.js\n");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("(function() { module.exports = window[\"React\"]; }());//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdXNpY2ZveF9kYXNoX2NvbXBvbmVudHMvZXh0ZXJuYWwgXCJSZWFjdFwiP2M0ODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxrQ0FBa0MsRUFBRSIsImZpbGUiOiJyZWFjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpIHsgbW9kdWxlLmV4cG9ydHMgPSB3aW5kb3dbXCJSZWFjdFwiXTsgfSgpKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///react\n");

/***/ })

/******/ });